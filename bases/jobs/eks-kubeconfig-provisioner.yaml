apiVersion: batch/v1
kind: Job
metadata:
  name: eks-kubeconfig-provisioner
  namespace: multicluster-engine
spec:
  template:
    spec:
      serviceAccountName: eks-kubeconfig-provisioner
      containers:
      - name: provisioner
        image: quay.io/openshift/aws-cli:latest
        command:
        - /bin/bash
        - -c
        - |
          set -euo pipefail
          
          echo "üîç Scanning for EKS clusters without kubeconfig..."
          
          # Find all EKS clusters that are Provisioned but missing kubeconfig secret
          for namespace in $(oc get namespaces -o name | grep "eks-" | cut -d/ -f2); do
            echo "Checking namespace: $namespace"
            
            # Check if cluster exists and is provisioned
            if oc get cluster "$namespace" -n "$namespace" >/dev/null 2>&1; then
              phase=$(oc get cluster "$namespace" -n "$namespace" -o jsonpath='{.status.phase}')
              
              if [[ "$phase" == "Provisioned" ]]; then
                echo "  ‚úÖ Cluster $namespace is provisioned"
                
                # Check if kubeconfig secret exists
                if ! oc get secret "${namespace}-kubeconfig" -n "$namespace" >/dev/null 2>&1; then
                  echo "  ‚ùå Missing kubeconfig secret for $namespace"
                  
                  # Get EKS cluster info
                  cluster_endpoint=$(oc get awsmanagedcontrolplane "$namespace" -n "$namespace" -o jsonpath='{.spec.controlPlaneEndpoint.host}')
                  cluster_region=$(oc get awsmanagedcontrolplane "$namespace" -n "$namespace" -o jsonpath='{.spec.region}')
                  
                  if [[ -n "$cluster_endpoint" && -n "$cluster_region" ]]; then
                    echo "  üîß Creating kubeconfig for $namespace"
                    echo "     Endpoint: $cluster_endpoint"
                    echo "     Region: $cluster_region"
                    
                    # Generate kubeconfig using AWS CLI
                    export AWS_REGION="$cluster_region"
                    aws eks update-kubeconfig --name "$namespace" --kubeconfig "/tmp/${namespace}-kubeconfig" --alias "$namespace"
                    
                    if [[ -f "/tmp/${namespace}-kubeconfig" ]]; then
                      # Create the kubeconfig secret
                      oc create secret generic "${namespace}-kubeconfig" \
                        -n "$namespace" \
                        --from-file=kubeconfig="/tmp/${namespace}-kubeconfig" \
                        --dry-run=client -o yaml | \
                      oc apply -f -
                      
                      echo "  ‚úÖ Created kubeconfig secret for $namespace"
                      
                      # Trigger ACM import by annotating the ManagedCluster
                      if oc get managedcluster "$namespace" >/dev/null 2>&1; then
                        oc annotate managedcluster "$namespace" \
                          "import.open-cluster-management.io/kubeconfig-secret-name=${namespace}-kubeconfig" \
                          "import.open-cluster-management.io/kubeconfig-secret-namespace=${namespace}" \
                          --overwrite
                        echo "  üîó Updated ManagedCluster import annotations"
                      fi
                    else
                      echo "  ‚ùå Failed to generate kubeconfig"
                    fi
                  else
                    echo "  ‚ö†Ô∏è  Missing cluster endpoint or region info"
                  fi
                else
                  echo "  ‚úÖ Kubeconfig secret already exists"
                fi
              else
                echo "  ‚è≥ Cluster $namespace is not yet provisioned (phase: $phase)"
              fi
            fi
          done
          
          echo "üéâ EKS kubeconfig provisioning complete"
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws_access_key_id
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              name: aws-credentials
              key: aws_secret_access_key
      restartPolicy: OnFailure
  backoffLimit: 3
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: eks-kubeconfig-provisioner
  namespace: multicluster-engine
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: eks-kubeconfig-provisioner
rules:
- apiGroups: [""]
  resources: ["namespaces", "secrets"]
  verbs: ["get", "list", "create", "update", "patch"]
- apiGroups: ["cluster.x-k8s.io"]
  resources: ["clusters"]
  verbs: ["get", "list"]
- apiGroups: ["controlplane.cluster.x-k8s.io"]
  resources: ["awsmanagedcontrolplanes"]
  verbs: ["get", "list"]
- apiGroups: ["cluster.open-cluster-management.io"]
  resources: ["managedclusters"]
  verbs: ["get", "list", "update", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: eks-kubeconfig-provisioner
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: eks-kubeconfig-provisioner
subjects:
- kind: ServiceAccount
  name: eks-kubeconfig-provisioner
  namespace: multicluster-engine