oc config view -o jsonpath='{.clusters[?(@.name=="cluster-10")].cluster.server}'
oc create token argocd-manager  -n kube-system

oc  get secret localhost-recovery-client-token -n openshift-kube-apiserver -o jsonpath='{..data.ca\.crt}'
oc  get secret localhost-recovery-client-token -n openshift-kube-apiserver -o jsonpath='{..data.token}'

oc delete job argo-cluster-10-import -n openshift-gitops && oc apply -f gitops-applications/regional-deployments.cluster-10.application.yaml

echo "secret/cluster-10-0-dz99c-admin-kubeconfig" | cut -d'/' -f2

 oc get secrets -o name -n cluster-10 | grep "cluster-10" | grep "kubeconfig"| cut -d'/' -f2


apiVersion: v1
kind: Secret
metadata:
  name: my-destination-cluster-secret
  namespace: argocd
  labels:
    # This label is required for Argo CD to recognize this as a cluster secret
    argocd.argoproj.io/secret-type: cluster
type: Opaque
stringData:
  # The name of the cluster. This will be displayed in the Argo CD UI.
  name: my-production-cluster
  # The API server URL of the destination cluster.
  server: https://<KUBERNETES_API_SERVER_ADDRESS>
  # The configuration for connecting to the cluster.
  config: |
    {
      "bearerToken": "eyJhbGciOiJSUzI1NiIsImtpZCI6IkV3TGFzcnZ0TEtULWpveGlIZVBDOXptWWE4QWliaTBkelFMeGZmcnJfZTQifQ.eyJhdWQiOlsiaHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3ZjIl0sImV4cCI6MTc1MjAxODk4NywiaWF0IjoxNzUyMDE1Mzg3LCJpc3MiOiJodHRwczovL2t1YmVybmV0ZXMuZGVmYXVsdC5zdmMiLCJqdGkiOiJjYzQxNTBhNy04OWJjLTQxYjAtOTYxYi05YjQ5YmVjM2M5YjAiLCJrdWJlcm5ldGVzLmlvIjp7Im5hbWVzcGFjZSI6Im9wZW5zaGlmdC1naXRvcHMiLCJzZXJ2aWNlYWNjb3VudCI6eyJuYW1lIjoib3BlbnNoaWZ0LWdpdG9wcy1hcmdvY2QtYXBwbGljYXRpb24tY29udHJvbGxlciIsInVpZCI6ImY0OGY3NDUxLWUwZGMtNDIwNy1hOThhLWIxYjA1ZDkwZjNjNCJ9fSwibmJmIjoxNzUyMDE1Mzg3LCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6b3BlbnNoaWZ0LWdpdG9wczpvcGVuc2hpZnQtZ2l0b3BzLWFyZ29jZC1hcHBsaWNhdGlvbi1jb250cm9sbGVyIn0.pXjjGk8Fk11rhzH4gE3zOAP2K6SWfmFkeudzZ8VDJCrFWx-IS_oWiJXlkEJXciuVRJL25SB6MgAaihLuSFSSSdWep7nRpE1A9nMORuaZFQUDpY29lm0sZif8SC_y87IXajaRsXDPfk7gY8_kwuhR3TYQY0kYfrBChKog_mqLKXvSo33eurOJD9h-bqxLzPGizZ5R55qlP3gmEhLBPSZxMM0q0EVSPAqCSAVjzAxEmdHrLn9dXNKU9akxL_J2t2ZID8TJL6a7PiOyMYAw7Yj8XkWcO2RQ4_8ATq1cujRbofS7EByFMfgV4O8IAqGvzMvZQNrUnZQt2i-OyGLDgEOVplXpEWjZspIoqaVZJnHSp5pzYzUd14JBwcDk0V8D-bgAA0ffjS9RGmAOeoQCl6TEeNf9J-q4V7YnmGW9MD65pGntsO8G32UebfBA6WedESCcaZk9gL6zzdoEchafIVa5rFfaEpP6Pj4cjlAJGl8gm4ENSS9hyX6YVS4qqezzJ-i1RkKcJNxMfr61O2nRqf656GpnLy4ywkPuG1P7auU3O-z1xjvV0cEC1pPgxf6cJfNN3ZFqh7RgmzYhjeBDDTBUvTuLHBkuvRe406KbFGkQRfT4CBNOdgCU2kCO9SkIpK0qg28sfu2WY7s3cexWBwui5bKgb4o9AIzm8iDKlvV19L0",
      "tlsClientConfig": {
        "insecure": false,
        "caData": ""
      }
    }



oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge

$ oc  get configmap argocd-cm -n openshift-gitops -o yaml
apiVersion: v1
data:
  admin.enabled: "true"
  application.instanceLabelKey: app.kubernetes.io/instance
  application.resourceTrackingMethod: label
  configManagementPlugins: ""
  dex.config: |
    connectors:
    - config:
        clientID: system:serviceaccount:openshift-gitops:openshift-gitops-argocd-dex-server
        clientSecret: $oidc.dex.clientSecret
        groups: []
        insecureCA: true
        issuer: https://kubernetes.default.svc
        redirectURI: https://openshift-gitops-server-openshift-gitops.apps.mturansk3.rosa.mturansk-test.csu2.i3.devshift.org/api/dex/callback
      id: openshift
      name: OpenShift
      type: openshift
  ga.anonymizeusers: "false"
  ga.trackingid: ""
  help.chatText: ""
  help.chatUrl: ""
  kustomize.buildOptions: ""
  oidc.config: ""
  repositories: ""
  repository.credentials: ""
  resource.exclusions: |
    - apiGroups:
      - tekton.dev
      clusters:
      - '*'
      kinds:
      - TaskRun
      - PipelineRun
  resource.inclusions: ""
  statusbadge.enabled: "false"
  url: https://openshift-gitops-server-openshift-gitops.apps.mturansk3.rosa.mturansk-test.csu2.i3.devshift.org
  users.anonymous.enabled: "false"
kind: ConfigMap
metadata:
  creationTimestamp: "2025-06-18T16:40:59Z"
  labels:
    app.kubernetes.io/managed-by: openshift-gitops
    app.kubernetes.io/name: argocd-cm
    app.kubernetes.io/part-of: argocd
  name: argocd-cm
  namespace: openshift-gitops
  ownerReferences:
  - apiVersion: argoproj.io/v1beta1
    blockOwnerDeletion: true
    controller: true
    kind: ArgoCD
    name: openshift-gitops
    uid: 743657a4-d7c4-41c9-9ef2-76381b0564a6
  resourceVersion: "9933348"
  uid: 50f0f76d-5bbc-4fd4-b929-cd33e110474c


Design a project in Golang that can read and write Kuberetes resources as yaml to disk. The project is called ACME
and has a main binary named `acme`. The binary can recursively read a directory, find all Kubernetes resources in yaml format
 (including resources from projects like OpenShift, OpenShift Hive, and Argo),
 and marshal the yaml into Go objects in memory.

