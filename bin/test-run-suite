#!/bin/bash
# Test Run Suite Orchestrator
# Runs complete test suite orchestrating all test tools

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
CLUSTER_NAME=""
CLUSTER_TYPE="ocp"
REGION="us-east-1"
DOMAIN="rosa.mturansk-test.csu2.i3.devshift.org"
INSTANCE_TYPE="m5.2xlarge"
REPLICAS="2"
CLEANUP_AFTER=""
CLEANUP_ON_SUCCESS="true"
CLEANUP_ON_FAILURE="false"
REPORT_FILE=""
VERBOSE=false
DRY_RUN=false
SKIP_PREREQUISITES=false
PARALLEL_TESTS=false

# Timeouts
PROVISION_TIMEOUT=3600    # 60 minutes
ACM_TIMEOUT=1200         # 20 minutes
GITOPS_TIMEOUT=600       # 10 minutes

# Test results
TEST_START_TIME=$(date +%s)
PHASE_RESULTS=()
CURRENT_PHASE=""
TEST_CLUSTER_CREATED=""

log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; }

# Log with timestamp
log_with_time() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%H:%M:%S')
    echo -e "[$timestamp] $level $message"
}

log_info_time() { log_with_time "${BLUE}[INFO]${NC}" "$@"; }
log_success_time() { log_with_time "${GREEN}[SUCCESS]${NC}" "$@"; }
log_warn_time() { log_with_time "${YELLOW}[WARN]${NC}" "$@"; }
log_error_time() { log_with_time "${RED}[ERROR]${NC}" "$@"; }

# Phase management
start_phase() {
    local phase="$1"
    CURRENT_PHASE="$phase"
    local phase_start_time=$(date +%s)
    export "PHASE_${phase}_START"="$phase_start_time"
    log_info_time "${BLUE}===== PHASE: $phase =====${NC}"
}

end_phase() {
    local result="$1"  # "PASS", "FAIL", "WARN"
    local message="${2:-}"
    
    local phase_start_var="PHASE_${CURRENT_PHASE}_START"
    local phase_start_time="${!phase_start_var:-$(date +%s)}"
    local phase_end_time=$(date +%s)
    local duration=$((phase_end_time - phase_start_time))
    
    PHASE_RESULTS+=("$CURRENT_PHASE:$result:$duration:$message")
    
    case "$result" in
        "PASS")
            log_success_time "${GREEN}✅ PHASE COMPLETED: $CURRENT_PHASE (${duration}s)${NC}"
            ;;
        "FAIL")
            log_error_time "${RED}❌ PHASE FAILED: $CURRENT_PHASE (${duration}s) - $message${NC}"
            ;;
        "WARN")
            log_warn_time "${YELLOW}⚠️  PHASE WARNING: $CURRENT_PHASE (${duration}s) - $message${NC}"
            ;;
    esac
}

# Cleanup on exit
cleanup_on_exit() {
    local exit_code=$?
    
    if [[ -n "$TEST_CLUSTER_CREATED" ]]; then
        local should_cleanup=false
        
        if [[ "$exit_code" -eq 0 && "$CLEANUP_ON_SUCCESS" == "true" ]]; then
            should_cleanup=true
            log_info "Test succeeded - cleaning up cluster as requested"
        elif [[ "$exit_code" -ne 0 && "$CLEANUP_ON_FAILURE" == "true" ]]; then
            should_cleanup=true
            log_info "Test failed - cleaning up cluster as requested"
        fi
        
        if [[ "$should_cleanup" == "true" ]]; then
            log_info "Cleaning up test cluster: $TEST_CLUSTER_CREATED"
            "$SCRIPT_DIR/test-cleanup" --cluster "$TEST_CLUSTER_CREATED" --quiet --force || true
        else
            log_info "Test cluster preserved: $TEST_CLUSTER_CREATED"
        fi
    fi
}

trap cleanup_on_exit EXIT

# Run prerequisites check
run_prerequisites_check() {
    start_phase "PREREQUISITES"
    
    if [[ "$SKIP_PREREQUISITES" == "true" ]]; then
        log_info "Skipping prerequisites check (--skip-prerequisites)"
        end_phase "PASS" "Skipped"
        return 0
    fi
    
    local cmd_args=()
    if [[ "$VERBOSE" == "true" ]]; then
        cmd_args+=(--verbose)
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-prerequisites ${cmd_args[*]}"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    if "$SCRIPT_DIR/test-prerequisites" "${cmd_args[@]}"; then
        end_phase "PASS"
        return 0
    else
        end_phase "FAIL" "Prerequisites validation failed"
        return 1
    fi
}

# Create test cluster
run_cluster_creation() {
    start_phase "CLUSTER_CREATE"
    
    local cmd_args=(
        --type "$CLUSTER_TYPE"
        --region "$REGION"
        --domain "$DOMAIN"
        --instance-type "$INSTANCE_TYPE"
        --replicas "$REPLICAS"
    )
    
    if [[ -n "$CLEANUP_AFTER" ]]; then
        cmd_args+=(--cleanup-after "$CLEANUP_AFTER")
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-cluster-create ${cmd_args[*]}"
        TEST_CLUSTER_CREATED="test-${CLUSTER_TYPE}-dry-run"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    # Capture cluster name from output
    local output
    if output=$("$SCRIPT_DIR/test-cluster-create" "${cmd_args[@]}" 2>&1); then
        # Extract cluster name from output
        TEST_CLUSTER_CREATED=$(echo "$output" | grep -o "test-${CLUSTER_TYPE}-[0-9-]*" | head -1 || echo "")
        
        if [[ -z "$TEST_CLUSTER_CREATED" ]]; then
            log_error "Could not determine created cluster name"
            end_phase "FAIL" "Could not determine cluster name"
            return 1
        fi
        
        log_success "Test cluster created: $TEST_CLUSTER_CREATED"
        end_phase "PASS"
        return 0
    else
        log_error "Cluster creation failed"
        echo "$output"
        end_phase "FAIL" "Cluster creation failed"
        return 1
    fi
}

# Provision cluster
run_cluster_provisioning() {
    start_phase "CLUSTER_PROVISION"
    
    if [[ -z "$TEST_CLUSTER_CREATED" ]]; then
        end_phase "FAIL" "No cluster to provision"
        return 1
    fi
    
    local cmd_args=(
        --cluster "$TEST_CLUSTER_CREATED"
        --timeout "$PROVISION_TIMEOUT"
    )
    
    if [[ "$VERBOSE" == "true" ]]; then
        cmd_args+=(--verbose)
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-cluster-provision ${cmd_args[*]}"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    if "$SCRIPT_DIR/test-cluster-provision" "${cmd_args[@]}"; then
        end_phase "PASS"
        return 0
    else
        end_phase "FAIL" "Cluster provisioning failed"
        return 1
    fi
}

# Validate cluster
run_cluster_validation() {
    start_phase "CLUSTER_VALIDATE"
    
    if [[ -z "$TEST_CLUSTER_CREATED" ]]; then
        end_phase "FAIL" "No cluster to validate"
        return 1
    fi
    
    local cmd_args=(
        --cluster "$TEST_CLUSTER_CREATED"
        --run-app-test
    )
    
    if [[ "$VERBOSE" == "true" ]]; then
        cmd_args+=(--verbose)
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-cluster-validate ${cmd_args[*]}"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    if "$SCRIPT_DIR/test-cluster-validate" "${cmd_args[@]}"; then
        end_phase "PASS"
        return 0
    else
        end_phase "FAIL" "Cluster validation failed"
        return 1
    fi
}

# Test ACM integration
run_acm_integration() {
    start_phase "ACM_INTEGRATION"
    
    if [[ -z "$TEST_CLUSTER_CREATED" ]]; then
        end_phase "FAIL" "No cluster for ACM integration"
        return 1
    fi
    
    local cmd_args=(
        --cluster "$TEST_CLUSTER_CREATED"
        --timeout "$ACM_TIMEOUT"
    )
    
    if [[ "$VERBOSE" == "true" ]]; then
        cmd_args+=(--verbose)
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-acm-integration ${cmd_args[*]}"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    if "$SCRIPT_DIR/test-acm-integration" "${cmd_args[@]}"; then
        end_phase "PASS"
        return 0
    else
        end_phase "FAIL" "ACM integration failed"
        return 1
    fi
}

# Test GitOps sync
run_gitops_sync() {
    start_phase "GITOPS_SYNC"
    
    if [[ -z "$TEST_CLUSTER_CREATED" ]]; then
        end_phase "FAIL" "No cluster for GitOps sync"
        return 1
    fi
    
    local cmd_args=(
        --cluster "$TEST_CLUSTER_CREATED"
        --timeout "$GITOPS_TIMEOUT"
        --check-workloads
    )
    
    if [[ "$VERBOSE" == "true" ]]; then
        cmd_args+=(--verbose)
    fi
    
    if [[ "$DRY_RUN" == "true" ]]; then
        log_info "[DRY RUN] Would run: $SCRIPT_DIR/test-gitops-sync ${cmd_args[*]}"
        end_phase "PASS" "Dry run"
        return 0
    fi
    
    if "$SCRIPT_DIR/test-gitops-sync" "${cmd_args[@]}"; then
        end_phase "PASS"
        return 0
    else
        end_phase "FAIL" "GitOps sync failed"
        return 1
    fi
}

# Run tests in parallel (experimental)
run_parallel_tests() {
    if [[ "$PARALLEL_TESTS" != "true" ]]; then
        return 0
    fi
    
    log_info "Running parallel validation tests..."
    
    # Run validation and ACM integration in parallel after provisioning
    local validation_pid=""
    local acm_pid=""
    
    if [[ "$DRY_RUN" != "true" ]]; then
        run_cluster_validation &
        validation_pid=$!
        
        run_acm_integration &
        acm_pid=$!
        
        # Wait for both to complete
        local validation_result=0
        local acm_result=0
        
        if [[ -n "$validation_pid" ]]; then
            wait "$validation_pid" || validation_result=$?
        fi
        
        if [[ -n "$acm_pid" ]]; then
            wait "$acm_pid" || acm_result=$?
        fi
        
        if [[ "$validation_result" -ne 0 || "$acm_result" -ne 0 ]]; then
            return 1
        fi
    fi
    
    return 0
}

# Generate test report
generate_test_report() {
    local test_end_time=$(date +%s)
    local total_duration=$((test_end_time - TEST_START_TIME))
    
    local report_content=""
    
    # Header
    report_content+="# OCP Cluster Provisioning Test Report\n\n"
    report_content+="**Test Date:** $(date)\n"
    report_content+="**Test Duration:** ${total_duration}s ($((total_duration / 60))m $((total_duration % 60))s)\n"
    report_content+="**Test Cluster:** ${TEST_CLUSTER_CREATED:-'Not Created'}\n\n"
    
    # Configuration
    report_content+="## Test Configuration\n\n"
    report_content+="- **Cluster Type:** $CLUSTER_TYPE\n"
    report_content+="- **Region:** $REGION\n"
    report_content+="- **Domain:** $DOMAIN\n"
    report_content+="- **Instance Type:** $INSTANCE_TYPE\n"
    report_content+="- **Replicas:** $REPLICAS\n"
    if [[ -n "$CLEANUP_AFTER" ]]; then
        report_content+="- **Auto-cleanup:** $CLEANUP_AFTER\n"
    fi
    report_content+="\n"
    
    # Results summary
    local passed_phases=0
    local failed_phases=0
    local warned_phases=0
    
    for result in "${PHASE_RESULTS[@]}"; do
        local status=$(echo "$result" | cut -d: -f2)
        case "$status" in
            "PASS") ((passed_phases++)) ;;
            "FAIL") ((failed_phases++)) ;;
            "WARN") ((warned_phases++)) ;;
        esac
    done
    
    report_content+="## Test Results Summary\n\n"
    if [[ "$failed_phases" -eq 0 ]]; then
        report_content+="### ✅ TEST SUITE PASSED\n\n"
    else
        report_content+="### ❌ TEST SUITE FAILED\n\n"
    fi
    
    report_content+="- **Phases Passed:** $passed_phases\n"
    report_content+="- **Phases Failed:** $failed_phases\n"
    report_content+="- **Phases Warned:** $warned_phases\n\n"
    
    # Phase details
    report_content+="## Phase Results\n\n"
    for result in "${PHASE_RESULTS[@]}"; do
        local phase=$(echo "$result" | cut -d: -f1)
        local status=$(echo "$result" | cut -d: -f2)
        local duration=$(echo "$result" | cut -d: -f3)
        local message=$(echo "$result" | cut -d: -f4)
        
        local status_icon=""
        case "$status" in
            "PASS") status_icon="✅" ;;
            "FAIL") status_icon="❌" ;;
            "WARN") status_icon="⚠️" ;;
        esac
        
        report_content+="### $status_icon $phase\n"
        report_content+="- **Status:** $status\n"
        report_content+="- **Duration:** ${duration}s ($((duration / 60))m $((duration % 60))s)\n"
        if [[ -n "$message" ]]; then
            report_content+="- **Message:** $message\n"
        fi
        report_content+="\n"
    done
    
    # Cluster resources (if cluster was created)
    if [[ -n "$TEST_CLUSTER_CREATED" && "$DRY_RUN" != "true" ]]; then
        report_content+="## Cluster Resources\n\n"
        
        # Check cluster status
        if oc get namespace "$TEST_CLUSTER_CREATED" &>/dev/null; then
            report_content+="- ✅ Namespace: $TEST_CLUSTER_CREATED\n"
        else
            report_content+="- ❌ Namespace: Not found\n"
        fi
        
        if oc get managedcluster "$TEST_CLUSTER_CREATED" &>/dev/null; then
            local mc_status=$(oc get managedcluster "$TEST_CLUSTER_CREATED" \
                -o jsonpath='{.status.conditions[?(@.type=="ManagedClusterConditionAvailable")].status}' 2>/dev/null || echo "Unknown")
            report_content+="- ✅ ManagedCluster: $mc_status\n"
        else
            report_content+="- ❌ ManagedCluster: Not found\n"
        fi
        
        if oc get applicationset "${TEST_CLUSTER_CREATED}-applications" -n openshift-gitops &>/dev/null; then
            report_content+="- ✅ ApplicationSet: Created\n"
        else
            report_content+="- ❌ ApplicationSet: Not found\n"
        fi
        
        report_content+="\n"
    fi
    
    # Next steps
    report_content+="## Next Steps\n\n"
    if [[ "$failed_phases" -eq 0 ]]; then
        report_content+="The test suite completed successfully. "
        if [[ "$CLEANUP_ON_SUCCESS" == "true" ]]; then
            report_content+="The test cluster will be automatically cleaned up.\n"
        else
            report_content+="The test cluster has been preserved for manual inspection.\n\n"
            report_content+="To clean up manually:\n"
            report_content+="\`\`\`bash\n"
            report_content+="./bin/test-cleanup --cluster $TEST_CLUSTER_CREATED\n"
            report_content+="\`\`\`\n"
        fi
    else
        report_content+="The test suite failed. Review the phase results above for details.\n\n"
        if [[ -n "$TEST_CLUSTER_CREATED" ]]; then
            report_content+="The test cluster \`$TEST_CLUSTER_CREATED\` "
            if [[ "$CLEANUP_ON_FAILURE" == "true" ]]; then
                report_content+="will be automatically cleaned up.\n"
            else
                report_content+="has been preserved for debugging.\n\n"
                report_content+="To clean up manually:\n"
                report_content+="\`\`\`bash\n"
                report_content+="./bin/test-cleanup --cluster $TEST_CLUSTER_CREATED\n"
                report_content+="\`\`\`\n"
            fi
        fi
    fi
    
    # Output report
    if [[ -n "$REPORT_FILE" ]]; then
        mkdir -p "$(dirname "$REPORT_FILE")"
        echo -e "$report_content" > "$REPORT_FILE"
        log_success "Test report written to: $REPORT_FILE"
    else
        echo
        echo "============================================"
        echo "              TEST REPORT"
        echo "============================================"
        echo -e "$report_content"
    fi
}

# Usage
usage() {
    cat << EOF
Test Run Suite Orchestrator

Usage: $0 [OPTIONS]

Cluster Configuration:
  --cluster NAME           Use existing test cluster (skip creation)
  --type TYPE              Cluster type: ocp, eks, hcp (default: ocp)
  --region REGION          AWS region (default: us-east-1)
  --domain DOMAIN          Base domain (default: rosa.mturansk-test.csu2.i3.devshift.org)
  --instance-type TYPE     EC2 instance type (default: m5.2xlarge)
  --replicas COUNT         Number of worker nodes (default: 2)
  --cleanup-after DURATION Auto-cleanup after duration (e.g., 2h, 30m, 1d)

Test Options:
  --cleanup-on-success     Clean up cluster after successful test (default: true)
  --no-cleanup-on-success  Leave cluster running after successful test
  --cleanup-on-failure     Clean up cluster after failed test (default: false)
  --skip-prerequisites     Skip prerequisites validation
  --parallel-tests         Run some validation tests in parallel (experimental)
  --verbose                Show detailed test output
  --dry-run               Show what would be tested without running tests

Timeouts:
  --provision-timeout S    Cluster provisioning timeout (default: 3600s)
  --acm-timeout S          ACM integration timeout (default: 1200s)
  --gitops-timeout S       GitOps sync timeout (default: 600s)

Output:
  --report-file FILE       Write test report to file
  --help                   Show this help message

Examples:
  $0                                     Run full test suite with defaults
  $0 --type eks --region us-west-2       Test EKS cluster in us-west-2
  $0 --cluster test-ocp-1234             Test existing cluster
  $0 --dry-run --verbose                 Show what would be tested
  $0 --report-file test-results.md       Write detailed report

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --cluster)
            CLUSTER_NAME="$2"
            shift 2
            ;;
        --type)
            CLUSTER_TYPE="$2"
            shift 2
            ;;
        --region)
            REGION="$2"
            shift 2
            ;;
        --domain)
            DOMAIN="$2"
            shift 2
            ;;
        --instance-type)
            INSTANCE_TYPE="$2"
            shift 2
            ;;
        --replicas)
            REPLICAS="$2"
            shift 2
            ;;
        --cleanup-after)
            CLEANUP_AFTER="$2"
            shift 2
            ;;
        --cleanup-on-success)
            CLEANUP_ON_SUCCESS="true"
            shift
            ;;
        --no-cleanup-on-success)
            CLEANUP_ON_SUCCESS="false"
            shift
            ;;
        --cleanup-on-failure)
            CLEANUP_ON_FAILURE="true"
            shift
            ;;
        --skip-prerequisites)
            SKIP_PREREQUISITES=true
            shift
            ;;
        --parallel-tests)
            PARALLEL_TESTS=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --provision-timeout)
            PROVISION_TIMEOUT="$2"
            shift 2
            ;;
        --acm-timeout)
            ACM_TIMEOUT="$2"
            shift 2
            ;;
        --gitops-timeout)
            GITOPS_TIMEOUT="$2"
            shift 2
            ;;
        --report-file)
            REPORT_FILE="$2"
            shift 2
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Main execution
main() {
    log_info "OCP Cluster Provisioning Test Suite"
    echo "===================================="
    
    # Show configuration
    if [[ -n "$CLUSTER_NAME" ]]; then
        echo "Using existing cluster: $CLUSTER_NAME"
        TEST_CLUSTER_CREATED="$CLUSTER_NAME"
    else
        echo "Creating new cluster:"
        echo "  Type: $CLUSTER_TYPE"
        echo "  Region: $REGION"
        echo "  Instance Type: $INSTANCE_TYPE"
        echo "  Replicas: $REPLICAS"
    fi
    
    echo "Test Options:"
    echo "  Cleanup on Success: $CLEANUP_ON_SUCCESS"
    echo "  Cleanup on Failure: $CLEANUP_ON_FAILURE"
    echo "  Skip Prerequisites: $SKIP_PREREQUISITES"
    echo "  Parallel Tests: $PARALLEL_TESTS"
    echo "  Verbose: $VERBOSE"
    echo "  Dry Run: $DRY_RUN"
    
    echo "Timeouts:"
    echo "  Provision: ${PROVISION_TIMEOUT}s ($((PROVISION_TIMEOUT / 60))m)"
    echo "  ACM: ${ACM_TIMEOUT}s ($((ACM_TIMEOUT / 60))m)"
    echo "  GitOps: ${GITOPS_TIMEOUT}s ($((GITOPS_TIMEOUT / 60))m)"
    
    if [[ -n "$REPORT_FILE" ]]; then
        echo "Report File: $REPORT_FILE"
    fi
    echo
    
    # Confirm execution for interactive mode
    if [[ "$DRY_RUN" != "true" && -t 0 ]]; then
        read -p "Start test suite? (y/N): " confirm
        if [[ "$confirm" != "y" && "$confirm" != "Y" ]]; then
            log_info "Test suite cancelled"
            exit 0
        fi
    fi
    
    # Run test phases
    local suite_failed=false
    
    # Prerequisites
    if ! run_prerequisites_check; then
        suite_failed=true
    fi
    
    # Cluster creation (if needed)
    if [[ -z "$CLUSTER_NAME" ]]; then
        if ! run_cluster_creation; then
            suite_failed=true
        fi
    else
        TEST_CLUSTER_CREATED="$CLUSTER_NAME"
        log_info "Using existing cluster: $CLUSTER_NAME"
    fi
    
    # Main test phases (continue even if some fail for complete report)
    if [[ "$suite_failed" != "true" ]]; then
        # Provisioning
        if ! run_cluster_provisioning; then
            suite_failed=true
        fi
        
        # Parallel tests if enabled
        if [[ "$PARALLEL_TESTS" == "true" && "$suite_failed" != "true" ]]; then
            if ! run_parallel_tests; then
                suite_failed=true
            fi
        else
            # Sequential tests
            if ! run_cluster_validation; then
                suite_failed=true
            fi
            
            if ! run_acm_integration; then
                suite_failed=true
            fi
        fi
        
        # GitOps sync (run regardless of previous failures for complete test)
        if ! run_gitops_sync; then
            suite_failed=true
        fi
    fi
    
    # Generate report
    generate_test_report
    
    # Final result
    local test_end_time=$(date +%s)
    local total_duration=$((test_end_time - TEST_START_TIME))
    
    echo
    if [[ "$suite_failed" != "true" ]]; then
        log_success "${GREEN}🎉 TEST SUITE COMPLETED SUCCESSFULLY${NC}"
        log_success "Total duration: ${total_duration}s ($((total_duration / 60))m $((total_duration % 60))s)"
        if [[ -n "$TEST_CLUSTER_CREATED" ]]; then
            log_success "Test cluster: $TEST_CLUSTER_CREATED"
        fi
        exit 0
    else
        log_error "${RED}❌ TEST SUITE FAILED${NC}"
        log_error "Total duration: ${total_duration}s ($((total_duration / 60))m $((total_duration % 60))s)"
        if [[ -n "$TEST_CLUSTER_CREATED" ]]; then
            log_error "Test cluster: $TEST_CLUSTER_CREATED"
        fi
        exit 1
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi