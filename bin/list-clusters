#!/bin/bash
set -e

# Simple Cluster Discovery Tool
# Lists all cluster configurations found in regions/ directory

usage() {
    echo "Usage: $0"
    echo ""
    echo "Lists all clusters from regions/ directory in table format"
    exit 1
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            usage
            ;;
        *)
            echo "Unknown option: $1"
            usage
            ;;
    esac
done

# Function to extract YAML value (handles nested structure)
extract_yaml_value() {
    local file="$1"
    local key="$2"
    
    if [ ! -f "$file" ]; then
        echo ""
        return
    fi
    
    # Use yq if available, otherwise fallback to grep/awk
    if command -v yq >/dev/null 2>&1; then
        yq eval ".$key" "$file" 2>/dev/null | sed 's/null//'
    else
        # Simple grep-based extraction
        grep -E "^[[:space:]]*${key}:" "$file" | head -1 | awk -F: '{print $2}' | sed 's/^[[:space:]]*//' | sed 's/["\047]//g' | tr -d '\r'
    fi
}

# Function to extract nested YAML value
extract_nested_yaml_value() {
    local file="$1"
    local parent="$2"
    local child="$3"
    
    if [ ! -f "$file" ]; then
        echo ""
        return
    fi
    
    if command -v yq >/dev/null 2>&1; then
        yq eval ".spec.${parent}.${child}" "$file" 2>/dev/null | sed 's/null//'
    else
        # Fallback parsing - look for the value under the parent section
        awk "
        BEGIN { in_section=0 }
        /^[[:space:]]*${parent}:/ { in_section=1; next }
        /^[[:space:]]*[^[:space:]]/ && in_section && !/^[[:space:]]*${child}:/ { in_section=0 }
        in_section && /^[[:space:]]*${child}:/ { 
            gsub(/^[[:space:]]*${child}:[[:space:]]*/, \"\")
            gsub(/[\"']/, \"\")
            print
            exit
        }
        " "$file"
    fi
}

# Function to validate cluster name format
validate_cluster_name() {
    local name="$1"
    if [[ "$name" =~ ^(ocp|eks|hcp)-[0-9]+ ]]; then
        return 0
    else
        return 1
    fi
}

# Function to extract cluster type from name
extract_cluster_type() {
    local name="$1"
    echo "$name" | sed -E 's/^(ocp|eks|hcp)-.*/\1/'
}

echo "Cluster Discovery Tool"
echo "====================="
echo ""

if [ ! -d "regions" ]; then
    echo "Error: regions/ directory not found" >&2
    exit 1
fi

# Arrays to store cluster data
declare -a clusters
declare -a types
declare -a regions
declare -a domains
declare -a instance_types
declare -a replicas
declare -a versions
declare -a errors

cluster_count=0
error_count=0

echo "Scanning regions/ directory..."

# Walk through regions directory
for region_dir in regions/*/; do
    if [ ! -d "$region_dir" ]; then
        continue
    fi
    
    region_name=$(basename "$region_dir")
    
    for cluster_dir in "$region_dir"*/; do
        if [ ! -d "$cluster_dir" ]; then
            continue
        fi
        
        cluster_name=$(basename "$cluster_dir")
        spec_file="$cluster_dir/region.yaml"
        
        # Initialize error tracking
        local_error=""
        
        # Validate cluster name
        if ! validate_cluster_name "$cluster_name"; then
            local_error="Invalid name format"
        fi
        
        # Check if spec file exists
        if [ ! -f "$spec_file" ]; then
            local_error="Missing region.yaml"
        fi
        
        # Extract cluster type from name
        cluster_type=$(extract_cluster_type "$cluster_name")
        
        # Parse specification file
        if [ -f "$spec_file" ]; then
            # Extract basic fields
            spec_type=$(extract_yaml_value "$spec_file" "spec.type")
            spec_region=$(extract_yaml_value "$spec_file" "spec.region")
            spec_domain=$(extract_yaml_value "$spec_file" "spec.domain")
            
            # Extract compute configuration
            instance_type=$(extract_nested_yaml_value "$spec_file" "compute" "instanceType")
            replica_count=$(extract_nested_yaml_value "$spec_file" "compute" "replicas")
            
            # Extract version information based on type
            version=""
            if [ "$spec_type" = "ocp" ] || [ "$cluster_type" = "ocp" ]; then
                version=$(extract_nested_yaml_value "$spec_file" "openshift" "version")
            elif [ "$spec_type" = "eks" ] || [ "$cluster_type" = "eks" ]; then
                version=$(extract_nested_yaml_value "$spec_file" "kubernetes" "version")
            elif [ "$spec_type" = "hcp" ] || [ "$cluster_type" = "hcp" ]; then
                version="hypershift"
            fi
            
            # Use spec values or fallback to inferred values
            final_type="${spec_type:-$cluster_type}"
            final_region="${spec_region:-$region_name}"
            final_domain="${spec_domain:-}"
            final_instance_type="${instance_type:-}"
            final_replicas="${replica_count:-}"
            final_version="${version:-}"
        else
            # Use defaults when file is missing
            final_type="$cluster_type"
            final_region="$region_name"
            final_domain=""
            final_instance_type=""
            final_replicas=""
            final_version=""
        fi
        
        # Store cluster data
        clusters[$cluster_count]="$cluster_name"
        types[$cluster_count]="$final_type"
        regions[$cluster_count]="$final_region"
        domains[$cluster_count]="$final_domain"
        instance_types[$cluster_count]="$final_instance_type"
        replicas[$cluster_count]="$final_replicas"
        versions[$cluster_count]="$final_version"
        errors[$cluster_count]="$local_error"
        
        if [ -n "$local_error" ]; then
            ((error_count++))
        fi
        
        ((cluster_count++))
    done
done

echo ""
echo "Found $cluster_count cluster configurations"
if [ $error_count -gt 0 ]; then
    echo "Warning: $error_count clusters have errors"
fi
echo ""

# Calculate column widths
max_name=12
max_type=4
max_region=6
max_domain=6
max_instance=8
max_replicas=8
max_version=7

for ((i = 0; i < cluster_count; i++)); do
    [ ${#clusters[$i]} -gt $max_name ] && max_name=${#clusters[$i]}
    [ ${#types[$i]} -gt $max_type ] && max_type=${#types[$i]}
    [ ${#regions[$i]} -gt $max_region ] && max_region=${#regions[$i]}
    [ ${#domains[$i]} -gt $max_domain ] && max_domain=${#domains[$i]}
    [ ${#instance_types[$i]} -gt $max_instance ] && max_instance=${#instance_types[$i]}
    [ ${#replicas[$i]} -gt $max_replicas ] && max_replicas=${#replicas[$i]}
    [ ${#versions[$i]} -gt $max_version ] && max_version=${#versions[$i]}
done

# Print table header
printf "%-${max_name}s %-${max_type}s %-${max_region}s %-${max_domain}s %-${max_instance}s %-${max_replicas}s %-${max_version}s\n" \
       "CLUSTER NAME" "TYPE" "REGION" "DOMAIN" "INSTANCE TYPE" "REPLICAS" "VERSION"

# Print separator
printf "%*s %*s %*s %*s %*s %*s %*s\n" \
       $max_name "$(printf '%*s' $max_name | tr ' ' '=')" \
       $max_type "$(printf '%*s' $max_type | tr ' ' '=')" \
       $max_region "$(printf '%*s' $max_region | tr ' ' '=')" \
       $max_domain "$(printf '%*s' $max_domain | tr ' ' '=')" \
       $max_instance "$(printf '%*s' $max_instance | tr ' ' '=')" \
       $max_replicas "$(printf '%*s' $max_replicas | tr ' ' '=')" \
       $max_version "$(printf '%*s' $max_version | tr ' ' '=')"

# Print cluster data
for ((i = 0; i < cluster_count; i++)); do
    error_indicator=""
    if [ -n "${errors[$i]}" ]; then
        error_indicator=" (ERROR: ${errors[$i]})"
    fi
    
    printf "%-${max_name}s %-${max_type}s %-${max_region}s %-${max_domain}s %-${max_instance}s %-${max_replicas}s %-${max_version}s%s\n" \
           "${clusters[$i]}" \
           "${types[$i]}" \
           "${regions[$i]}" \
           "${domains[$i]}" \
           "${instance_types[$i]}" \
           "${replicas[$i]}" \
           "${versions[$i]}" \
           "$error_indicator"
done

# Show error summary if there are errors
if [ $error_count -gt 0 ]; then
    echo ""
    echo "Errors found:"
    for ((i = 0; i < cluster_count; i++)); do
        if [ -n "${errors[$i]}" ]; then
            echo "  ${clusters[$i]}: ${errors[$i]}"
        fi
    done
fi

exit 0