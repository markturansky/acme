#!/bin/bash
set -euo pipefail

# eks-ensure-kubeconfig - Ensure EKS cluster has kubeconfig secret for ACM import
# Usage: ./bin/eks-ensure-kubeconfig <cluster-name>

CLUSTER_NAME="${1:-}"

if [[ -z "$CLUSTER_NAME" ]]; then
    echo "Usage: $0 <cluster-name>"
    echo "Example: $0 eks-01-mturansk-a"
    exit 1
fi

log() {
    echo "$(date '+%H:%M:%S') $*"
}

error_log() {
    echo "$(date '+%H:%M:%S') ❌ ERROR: $*" >&2
}

success_log() {
    echo "$(date '+%H:%M:%S') ✅ $*"
}

warning_log() {
    echo "$(date '+%H:%M:%S') ⚠️  $*"
}

# Check if cluster namespace exists
if ! oc get namespace "$CLUSTER_NAME" >/dev/null 2>&1; then
    error_log "Namespace $CLUSTER_NAME does not exist"
    exit 1
fi

log "🔍 Checking EKS cluster: $CLUSTER_NAME"

# Check if CAPI cluster exists
if ! oc get cluster "$CLUSTER_NAME" -n "$CLUSTER_NAME" >/dev/null 2>&1; then
    error_log "CAPI Cluster $CLUSTER_NAME not found"
    exit 1
fi

# Get cluster phase
PHASE=$(oc get cluster "$CLUSTER_NAME" -n "$CLUSTER_NAME" -o jsonpath='{.status.phase}')
log "Cluster phase: $PHASE"

if [[ "$PHASE" != "Provisioned" ]]; then
    warning_log "Cluster is not yet provisioned (phase: $PHASE)"
    log "Waiting for cluster to be provisioned..."
    
    # Wait up to 30 minutes for cluster to be provisioned
    timeout_count=0
    while [[ "$PHASE" != "Provisioned" && $timeout_count -lt 180 ]]; do
        sleep 10
        PHASE=$(oc get cluster "$CLUSTER_NAME" -n "$CLUSTER_NAME" -o jsonpath='{.status.phase}' || echo "Unknown")
        echo -n "."
        timeout_count=$((timeout_count + 1))
    done
    echo ""
    
    if [[ "$PHASE" != "Provisioned" ]]; then
        error_log "Cluster failed to reach Provisioned state within 30 minutes"
        log "Current phase: $PHASE"
        exit 1
    fi
fi

success_log "Cluster is provisioned"

# Check if kubeconfig secret already exists
if oc get secret "${CLUSTER_NAME}-kubeconfig" -n "$CLUSTER_NAME" >/dev/null 2>&1; then
    success_log "Kubeconfig secret already exists"
    
    # Verify it's valid
    if oc get secret "${CLUSTER_NAME}-kubeconfig" -n "$CLUSTER_NAME" -o jsonpath='{.data.kubeconfig}' | base64 -d | grep -q "apiVersion: v1"; then
        success_log "Kubeconfig secret is valid"
        exit 0
    else
        warning_log "Kubeconfig secret exists but appears invalid, recreating..."
        oc delete secret "${CLUSTER_NAME}-kubeconfig" -n "$CLUSTER_NAME"
    fi
fi

log "Creating kubeconfig secret for $CLUSTER_NAME"

# Get EKS cluster details
CLUSTER_ENDPOINT=$(oc get awsmanagedcontrolplane "$CLUSTER_NAME" -n "$CLUSTER_NAME" -o jsonpath='{.spec.controlPlaneEndpoint.host}' 2>/dev/null || echo "")
CLUSTER_REGION=$(oc get awsmanagedcontrolplane "$CLUSTER_NAME" -n "$CLUSTER_NAME" -o jsonpath='{.spec.region}' 2>/dev/null || echo "")

if [[ -z "$CLUSTER_ENDPOINT" || -z "$CLUSTER_REGION" ]]; then
    error_log "Could not get cluster endpoint or region from AWSManagedControlPlane"
    log "Endpoint: $CLUSTER_ENDPOINT"
    log "Region: $CLUSTER_REGION"
    exit 1
fi

success_log "Found cluster details:"
log "  Endpoint: $CLUSTER_ENDPOINT"
log "  Region: $CLUSTER_REGION"

# Check AWS credentials
if [[ -z "${AWS_ACCESS_KEY_ID:-}" ]] || [[ -z "${AWS_SECRET_ACCESS_KEY:-}" ]]; then
    log "Loading AWS credentials from secret..."
    
    if oc get secret aws-credentials -n multicluster-engine >/dev/null 2>&1; then
        export AWS_ACCESS_KEY_ID=$(oc get secret aws-credentials -n multicluster-engine -o jsonpath='{.data.aws_access_key_id}' | base64 -d)
        export AWS_SECRET_ACCESS_KEY=$(oc get secret aws-credentials -n multicluster-engine -o jsonpath='{.data.aws_secret_access_key}' | base64 -d)
    else
        error_log "AWS credentials secret not found in multicluster-engine namespace"
        exit 1
    fi
fi

export AWS_REGION="$CLUSTER_REGION"

# Verify EKS cluster exists in AWS
log "Verifying EKS cluster exists in AWS..."
if ! aws eks describe-cluster --name "$CLUSTER_NAME" >/dev/null 2>&1; then
    error_log "EKS cluster $CLUSTER_NAME not found in AWS region $CLUSTER_REGION"
    exit 1
fi

success_log "EKS cluster confirmed in AWS"

# Generate kubeconfig
KUBECONFIG_FILE="/tmp/${CLUSTER_NAME}-kubeconfig"
log "Generating kubeconfig..."

if aws eks update-kubeconfig --name "$CLUSTER_NAME" --kubeconfig "$KUBECONFIG_FILE" --alias "$CLUSTER_NAME"; then
    success_log "Kubeconfig generated successfully"
else
    error_log "Failed to generate kubeconfig"
    exit 1
fi

# Verify kubeconfig is valid
if ! grep -q "apiVersion: v1" "$KUBECONFIG_FILE"; then
    error_log "Generated kubeconfig appears invalid"
    exit 1
fi

# Create the kubeconfig secret
log "Creating kubeconfig secret..."
if oc create secret generic "${CLUSTER_NAME}-kubeconfig" \
    -n "$CLUSTER_NAME" \
    --from-file=kubeconfig="$KUBECONFIG_FILE"; then
    success_log "Kubeconfig secret created"
else
    error_log "Failed to create kubeconfig secret"
    exit 1
fi

# Clean up temp file
rm -f "$KUBECONFIG_FILE"

# Update ManagedCluster for ACM import
if oc get managedcluster "$CLUSTER_NAME" >/dev/null 2>&1; then
    log "Updating ManagedCluster import configuration..."
    
    oc annotate managedcluster "$CLUSTER_NAME" \
        "import.open-cluster-management.io/kubeconfig-secret-name=${CLUSTER_NAME}-kubeconfig" \
        "import.open-cluster-management.io/kubeconfig-secret-namespace=${CLUSTER_NAME}" \
        "import.open-cluster-management.io/last-kubeconfig-update=$(date -Iseconds)" \
        --overwrite
    
    # Remove unreachable taint to trigger reimport
    if oc get managedcluster "$CLUSTER_NAME" -o jsonpath='{.spec.taints[*].key}' | grep -q "cluster.open-cluster-management.io/unreachable"; then
        log "Removing unreachable taint..."
        oc patch managedcluster "$CLUSTER_NAME" --type=json \
            -p='[{"op": "remove", "path": "/spec/taints"}]' || warning_log "Could not remove taints"
    fi
    
    success_log "ManagedCluster updated for import"
    
    # Wait a moment and check status
    log "Waiting for ACM import to process..."
    sleep 15
    
    IMPORT_STATUS=$(oc get managedcluster "$CLUSTER_NAME" -o jsonpath='{.status.conditions[?(@.type=="ManagedClusterImportSucceeded")].status}' 2>/dev/null || echo "Unknown")
    AVAILABLE_STATUS=$(oc get managedcluster "$CLUSTER_NAME" -o jsonpath='{.status.conditions[?(@.type=="ManagedClusterConditionAvailable")].status}' 2>/dev/null || echo "Unknown")
    
    log "Import Status: $IMPORT_STATUS"
    log "Available Status: $AVAILABLE_STATUS"
    
    if [[ "$AVAILABLE_STATUS" == "True" ]]; then
        success_log "🎉 Cluster $CLUSTER_NAME is now available in ACM!"
    else
        warning_log "Cluster import may still be in progress. Check ACM console for details."
    fi
else
    warning_log "ManagedCluster $CLUSTER_NAME not found"
fi

success_log "✨ EKS kubeconfig provisioning completed for $CLUSTER_NAME"