#!/bin/bash
# Test Cluster Validation Tool
# Validates provisioned cluster functionality

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
CLUSTER_NAME=""
RUN_APP_TEST=false
SKIP_OPERATOR_CHECK=false
VERBOSE=false
KUBECONFIG_FILE=""
TEMP_KUBECONFIG=""

# Test counters
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_WARNED=0

log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[PASS]${NC} $*"; ((TESTS_PASSED++)); }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*"; ((TESTS_WARNED++)); }
log_error() { echo -e "${RED}[FAIL]${NC} $*"; ((TESTS_FAILED++)); }

# Cleanup function
cleanup() {
    if [[ -n "$TEMP_KUBECONFIG" && -f "$TEMP_KUBECONFIG" ]]; then
        rm -f "$TEMP_KUBECONFIG"
    fi
}
trap cleanup EXIT

# Detect cluster type
detect_cluster_type() {
    local cluster_name="$1"
    
    # Check for OCP (Hive ClusterDeployment)
    if oc get clusterdeployment "$cluster_name" -n "$cluster_name" &>/dev/null; then
        echo "ocp"
    # Check for EKS (CAPI Cluster)
    elif oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" &>/dev/null; then
        echo "eks"
    # Check for HCP (HostedCluster)
    elif oc get hostedcluster "$cluster_name" -n "$cluster_name" &>/dev/null; then
        echo "hcp"
    else
        echo "unknown"
    fi
}

# Extract cluster admin kubeconfig
extract_kubeconfig() {
    local cluster_name="$1"
    local cluster_type="$2"
    
    log_info "Extracting cluster admin kubeconfig..."
    
    TEMP_KUBECONFIG="/tmp/${cluster_name}-kubeconfig-$$"
    
    case "$cluster_type" in
        ocp)
            # OCP clusters have admin kubeconfig in secret
            if ! oc get secret "${cluster_name}-admin-kubeconfig" -n "$cluster_name" &>/dev/null; then
                log_error "Admin kubeconfig secret not found: ${cluster_name}-admin-kubeconfig"
                return 1
            fi
            
            if ! oc get secret "${cluster_name}-admin-kubeconfig" -n "$cluster_name" \
                 -o jsonpath='{.data.kubeconfig}' | base64 -d > "$TEMP_KUBECONFIG"; then
                log_error "Failed to extract admin kubeconfig"
                return 1
            fi
            ;;
        eks)
            # EKS clusters need AWS CLI to generate kubeconfig
            if ! command -v aws &>/dev/null; then
                log_error "AWS CLI required for EKS cluster access"
                return 1
            fi
            
            # Get cluster region from CAPI cluster
            local region=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" \
                -o jsonpath='{.spec.infrastructureRef.region}' 2>/dev/null || echo "us-east-1")
            
            log_info "Generating EKS kubeconfig for region: $region"
            if ! aws eks update-kubeconfig --name "$cluster_name" --region "$region" --kubeconfig "$TEMP_KUBECONFIG"; then
                log_error "Failed to generate EKS kubeconfig"
                return 1
            fi
            ;;
        hcp)
            # HCP clusters have kubeconfig in secret
            if ! oc get secret "${cluster_name}-kubeconfig" -n "$cluster_name" &>/dev/null; then
                log_error "HCP kubeconfig secret not found: ${cluster_name}-kubeconfig"
                return 1
            fi
            
            if ! oc get secret "${cluster_name}-kubeconfig" -n "$cluster_name" \
                 -o jsonpath='{.data.kubeconfig}' | base64 -d > "$TEMP_KUBECONFIG"; then
                log_error "Failed to extract HCP kubeconfig"
                return 1
            fi
            ;;
        *)
            log_error "Unknown cluster type for kubeconfig extraction: $cluster_type"
            return 1
            ;;
    esac
    
    # Validate kubeconfig file
    if [[ ! -s "$TEMP_KUBECONFIG" ]]; then
        log_error "Kubeconfig file is empty or invalid"
        return 1
    fi
    
    log_success "Kubeconfig extracted successfully"
    return 0
}

# Test cluster API access
test_cluster_access() {
    log_info "Testing cluster API access..."
    
    if ! KUBECONFIG="$TEMP_KUBECONFIG" oc cluster-info &>/dev/null; then
        log_error "Cannot access cluster API"
        return 1
    fi
    
    local cluster_info=$(KUBECONFIG="$TEMP_KUBECONFIG" oc cluster-info 2>/dev/null | head -1 || echo "Unknown")
    log_success "Cluster API accessible: $cluster_info"
    
    # Test basic permissions
    if ! KUBECONFIG="$TEMP_KUBECONFIG" oc get nodes &>/dev/null; then
        log_error "Cannot list nodes - insufficient permissions"
        return 1
    fi
    
    log_success "Admin permissions confirmed"
    return 0
}

# Validate cluster version
validate_cluster_version() {
    local cluster_type="$1"
    
    log_info "Validating cluster version..."
    
    case "$cluster_type" in
        ocp|hcp)
            local cluster_version=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get clusterversion version -o jsonpath='{.status.desired.version}' 2>/dev/null || echo "Unknown")
            if [[ "$cluster_version" == "Unknown" ]]; then
                log_warn "Could not determine OpenShift version"
            else
                log_success "OpenShift version: $cluster_version"
            fi
            ;;
        eks)
            local k8s_version=$(KUBECONFIG="$TEMP_KUBECONFIG" oc version --client=false -o json 2>/dev/null | jq -r '.serverVersion.gitVersion' 2>/dev/null || echo "Unknown")
            if [[ "$k8s_version" == "Unknown" ]]; then
                log_warn "Could not determine Kubernetes version"
            else
                log_success "Kubernetes version: $k8s_version"
            fi
            ;;
    esac
    
    return 0
}

# Check node readiness
check_node_readiness() {
    log_info "Checking node readiness..."
    
    local nodes_output=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get nodes --no-headers 2>/dev/null || echo "")
    if [[ -z "$nodes_output" ]]; then
        log_error "No nodes found or cannot access nodes"
        return 1
    fi
    
    local total_nodes=$(echo "$nodes_output" | wc -l)
    local ready_nodes=$(echo "$nodes_output" | grep -c " Ready " || echo "0")
    local not_ready_nodes=$(echo "$nodes_output" | grep -c " NotReady " || echo "0")
    
    if [[ "$not_ready_nodes" -gt 0 ]]; then
        log_error "Some nodes not ready: $ready_nodes/$total_nodes ready"
        if [[ "$VERBOSE" == "true" ]]; then
            echo "$nodes_output" | grep " NotReady "
        fi
        return 1
    fi
    
    log_success "All nodes ready: $ready_nodes/$total_nodes"
    
    # Show node details if verbose
    if [[ "$VERBOSE" == "true" ]]; then
        log_info "Node details:"
        KUBECONFIG="$TEMP_KUBECONFIG" oc get nodes -o wide
    fi
    
    return 0
}

# Check cluster operators (OpenShift only)
check_cluster_operators() {
    local cluster_type="$1"
    
    if [[ "$cluster_type" != "ocp" && "$cluster_type" != "hcp" ]]; then
        log_info "Skipping cluster operators check (not OpenShift)"
        return 0
    fi
    
    if [[ "$SKIP_OPERATOR_CHECK" == "true" ]]; then
        log_info "Skipping cluster operators check (--skip-operator-check)"
        return 0
    fi
    
    log_info "Checking cluster operators..."
    
    local operators_output=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get clusteroperators --no-headers 2>/dev/null || echo "")
    if [[ -z "$operators_output" ]]; then
        log_warn "No cluster operators found or cannot access them"
        return 0
    fi
    
    local total_operators=$(echo "$operators_output" | wc -l)
    local available_operators=$(echo "$operators_output" | grep -c " True .* False .* False" || echo "0")
    local degraded_operators=$(echo "$operators_output" | grep -c " .* .* True" || echo "0")
    local progressing_operators=$(echo "$operators_output" | grep -c " .* True " || echo "0")
    
    # Calculate health percentage
    local health_percent=$((available_operators * 100 / total_operators))
    
    if [[ "$degraded_operators" -gt 0 ]]; then
        log_error "Degraded cluster operators found: $degraded_operators"
        if [[ "$VERBOSE" == "true" ]]; then
            echo "$operators_output" | grep " .* .* True" | head -5
        fi
        return 1
    elif [[ "$health_percent" -lt 95 ]]; then
        log_warn "Some cluster operators not fully available: $available_operators/$total_operators ($health_percent%)"
        if [[ "$VERBOSE" == "true" ]]; then
            echo "$operators_output" | grep -v " True .* False .* False" | head -5
        fi
    else
        log_success "Cluster operators healthy: $available_operators/$total_operators ($health_percent%)"
    fi
    
    if [[ "$progressing_operators" -gt 0 ]]; then
        log_info "Operators still progressing: $progressing_operators (this is normal after provisioning)"
    fi
    
    return 0
}

# Check persistent volumes
check_storage() {
    log_info "Checking storage..."
    
    local pvs=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get pv --no-headers 2>/dev/null | wc -l || echo "0")
    if [[ "$pvs" -eq 0 ]]; then
        log_warn "No persistent volumes found"
    else
        local available_pvs=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get pv --no-headers 2>/dev/null | grep -c " Available\| Bound" || echo "0")
        log_success "Persistent volumes available: $available_pvs/$pvs"
    fi
    
    # Check storage classes
    local storage_classes=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get storageclass --no-headers 2>/dev/null | wc -l || echo "0")
    if [[ "$storage_classes" -eq 0 ]]; then
        log_warn "No storage classes found"
    else
        log_success "Storage classes available: $storage_classes"
        if [[ "$VERBOSE" == "true" ]]; then
            KUBECONFIG="$TEMP_KUBECONFIG" oc get storageclass
        fi
    fi
    
    return 0
}

# Check networking
check_networking() {
    log_info "Checking networking..."
    
    # Check nodes have internal/external IPs
    local nodes_with_ips=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get nodes -o wide --no-headers 2>/dev/null | grep -c "[0-9]\+\.[0-9]\+\.[0-9]\+\.[0-9]\+" || echo "0")
    local total_nodes=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get nodes --no-headers 2>/dev/null | wc -l || echo "0")
    
    if [[ "$nodes_with_ips" -lt "$total_nodes" ]]; then
        log_warn "Some nodes missing IP addresses: $nodes_with_ips/$total_nodes"
    else
        log_success "All nodes have IP addresses: $nodes_with_ips/$total_nodes"
    fi
    
    # Check DNS resolution
    if KUBECONFIG="$TEMP_KUBECONFIG" oc get service kubernetes -n default &>/dev/null; then
        log_success "Kubernetes DNS service accessible"
    else
        log_warn "Cannot access Kubernetes DNS service"
    fi
    
    return 0
}

# Test application deployment
test_application_deployment() {
    if [[ "$RUN_APP_TEST" != "true" ]]; then
        log_info "Skipping application deployment test (use --run-app-test to enable)"
        return 0
    fi
    
    log_info "Testing application deployment..."
    
    local test_namespace="test-deployment-$$"
    local cleanup_test_app=false
    
    # Create test namespace
    if KUBECONFIG="$TEMP_KUBECONFIG" oc create namespace "$test_namespace" &>/dev/null; then
        cleanup_test_app=true
    else
        log_error "Failed to create test namespace"
        return 1
    fi
    
    # Deploy test application
    if KUBECONFIG="$TEMP_KUBECONFIG" oc create deployment test-nginx --image=nginx:latest -n "$test_namespace" &>/dev/null; then
        log_info "Test application created, waiting for readiness..."
        
        # Wait for deployment to be ready
        local timeout=300  # 5 minutes
        local elapsed=0
        
        while [[ $elapsed -lt $timeout ]]; do
            if KUBECONFIG="$TEMP_KUBECONFIG" oc get deployment test-nginx -n "$test_namespace" -o jsonpath='{.status.readyReplicas}' 2>/dev/null | grep -q "1"; then
                log_success "Test application deployed successfully"
                break
            fi
            sleep 10
            elapsed=$((elapsed + 10))
        done
        
        if [[ $elapsed -ge $timeout ]]; then
            log_error "Test application deployment timeout"
            cleanup_test_app=false  # Leave for debugging
            return 1
        fi
        
        # Test service creation
        if KUBECONFIG="$TEMP_KUBECONFIG" oc expose deployment test-nginx --port=80 -n "$test_namespace" &>/dev/null; then
            log_success "Test service created successfully"
        else
            log_warn "Failed to create test service"
        fi
        
    else
        log_error "Failed to create test application"
        cleanup_test_app=false
        return 1
    fi
    
    # Cleanup test resources
    if [[ "$cleanup_test_app" == "true" ]]; then
        KUBECONFIG="$TEMP_KUBECONFIG" oc delete namespace "$test_namespace" --timeout=60s &>/dev/null || log_warn "Failed to cleanup test namespace"
    fi
    
    return 0
}

# Check OpenShift-specific features
check_openshift_features() {
    local cluster_type="$1"
    
    if [[ "$cluster_type" != "ocp" && "$cluster_type" != "hcp" ]]; then
        log_info "Skipping OpenShift-specific checks (not OpenShift)"
        return 0
    fi
    
    log_info "Checking OpenShift-specific features..."
    
    # Check console route
    if KUBECONFIG="$TEMP_KUBECONFIG" oc get route console -n openshift-console &>/dev/null; then
        local console_url=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get route console -n openshift-console -o jsonpath='{.spec.host}' 2>/dev/null || echo "unknown")
        log_success "OpenShift console available: https://$console_url"
    else
        log_warn "OpenShift console route not found"
    fi
    
    # Check image registry
    local registry_status=$(KUBECONFIG="$TEMP_KUBECONFIG" oc get configs.imageregistry.operator.openshift.io cluster -o jsonpath='{.spec.managementState}' 2>/dev/null || echo "Unknown")
    if [[ "$registry_status" == "Managed" ]]; then
        log_success "Image registry managed"
    else
        log_warn "Image registry status: $registry_status"
    fi
    
    # Check OAuth
    if KUBECONFIG="$TEMP_KUBECONFIG" oc get oauth cluster &>/dev/null; then
        log_success "OAuth configuration found"
    else
        log_warn "OAuth configuration not found"
    fi
    
    return 0
}

# Generate validation summary
generate_summary() {
    echo
    echo "============================================"
    echo "        CLUSTER VALIDATION SUMMARY"
    echo "============================================"
    echo -e "${GREEN}Tests Passed:${NC}  $TESTS_PASSED"
    echo -e "${YELLOW}Warnings:${NC}     $TESTS_WARNED"
    echo -e "${RED}Tests Failed:${NC} $TESTS_FAILED"
    echo "============================================"
    
    if [[ "$TESTS_FAILED" -eq 0 ]]; then
        echo -e "${GREEN}✅ Cluster validation successful${NC}"
        return 0
    else
        echo -e "${RED}❌ Cluster validation failed - $TESTS_FAILED critical issues${NC}"
        return 1
    fi
}

# Usage
usage() {
    cat << EOF
Test Cluster Validation Tool

Usage: $0 --cluster CLUSTER_NAME [OPTIONS]

Required:
  --cluster NAME           Name of the test cluster to validate

Options:
  --run-app-test          Deploy and test a sample application
  --skip-operator-check   Skip cluster operators health check
  --verbose               Show detailed validation information
  --kubeconfig FILE       Use specific kubeconfig file (skip extraction)
  --help                  Show this help message

Examples:
  $0 --cluster test-ocp-1234                    Basic cluster validation
  $0 --cluster test-ocp-1234 --run-app-test     Include application test
  $0 --cluster test-ocp-1234 --verbose          Detailed validation
  $0 --cluster test-eks-1234 --skip-operator-check  Skip OpenShift operators

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --cluster)
            CLUSTER_NAME="$2"
            shift 2
            ;;
        --run-app-test)
            RUN_APP_TEST=true
            shift
            ;;
        --skip-operator-check)
            SKIP_OPERATOR_CHECK=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --kubeconfig)
            KUBECONFIG_FILE="$2"
            shift 2
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$CLUSTER_NAME" ]]; then
    log_error "Cluster name is required"
    usage
    exit 1
fi

# Main execution
main() {
    log_info "Test Cluster Validation Tool"
    echo "============================"
    echo "Cluster: $CLUSTER_NAME"
    echo "App Test: $RUN_APP_TEST"
    echo "Verbose: $VERBOSE"
    if [[ -n "$KUBECONFIG_FILE" ]]; then
        echo "Kubeconfig: $KUBECONFIG_FILE"
    fi
    echo
    
    # Detect cluster type
    local cluster_type=$(detect_cluster_type "$CLUSTER_NAME")
    if [[ "$cluster_type" == "unknown" ]]; then
        log_error "Could not detect cluster type for: $CLUSTER_NAME"
        log_info "Make sure the cluster is provisioned and resources exist"
        exit 1
    fi
    log_info "Detected cluster type: $cluster_type"
    
    # Extract or use provided kubeconfig
    if [[ -n "$KUBECONFIG_FILE" ]]; then
        if [[ ! -f "$KUBECONFIG_FILE" ]]; then
            log_error "Kubeconfig file not found: $KUBECONFIG_FILE"
            exit 1
        fi
        TEMP_KUBECONFIG="$KUBECONFIG_FILE"
        log_success "Using provided kubeconfig: $KUBECONFIG_FILE"
    else
        if ! extract_kubeconfig "$CLUSTER_NAME" "$cluster_type"; then
            exit 1
        fi
    fi
    
    # Run validation tests
    test_cluster_access || true
    validate_cluster_version "$cluster_type" || true
    check_node_readiness || true
    check_cluster_operators "$cluster_type" || true
    check_storage || true
    check_networking || true
    check_openshift_features "$cluster_type" || true
    test_application_deployment || true
    
    # Generate summary
    if generate_summary; then
        echo
        echo "Next steps:"
        echo "1. Test ACM integration: ./bin/test-acm-integration --cluster $CLUSTER_NAME"
        echo "2. Test GitOps sync: ./bin/test-gitops-sync --cluster $CLUSTER_NAME"
        echo "3. Clean up cluster: ./bin/test-cleanup --cluster $CLUSTER_NAME"
        exit 0
    else
        exit 1
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi