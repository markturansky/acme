#!/bin/bash

# Simplified OpenShift Bootstrap Health Check Script
# Generates comprehensive status report for all clusters and components

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"
STATUS_FILE="$ROOT_DIR/STATUS.md"

# Check if we're connected to the hub cluster
check_hub_connection() {
    echo "Checking hub cluster connection..."
    if ! oc whoami &>/dev/null; then
        echo "❌ Not connected to hub cluster. Please run: oc login"
        exit 1
    fi
    
    local current_context=$(oc config current-context 2>/dev/null || echo "unknown")
    echo "✅ Connected to hub cluster: $current_context"
}

# Get list of managed clusters
get_cluster_list() {
    find "$ROOT_DIR/gitops-applications" -name "cluster-*.yaml" -exec basename {} .yaml \; | sort
}

# Generate STATUS.md file
generate_status_file() {
    echo "Generating STATUS.md..."
    
    local timestamp=$(date +'%Y-%m-%d %H:%M:%S %Z')
    local clusters=$(get_cluster_list)
    
    cat > "$STATUS_FILE" << EOF
# OpenShift Bootstrap Cluster Status

**Last Updated:** $timestamp  
**Generated by:** \`bin/health-check\` script

## Hub Cluster Status

### ArgoCD GitOps
$(
    if oc get deployment.apps/openshift-gitops-server -n openshift-gitops &>/dev/null; then
        echo "- **Status:** ✅ Running"
        echo "- **Applications:** $(oc get application.argoproj.io -n openshift-gitops --no-headers 2>/dev/null | wc -l) total"
    else
        echo "- **Status:** ❌ Not found or not accessible"
    fi
)

### ACM MultiClusterHub
$(
    if oc get multiclusterhub multiclusterhub -n open-cluster-management &>/dev/null; then
        echo "- **Status:** ✅ $(oc get multiclusterhub multiclusterhub -n open-cluster-management -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")"
    else
        echo "- **Status:** ❌ Not found or not accessible"
    fi
)

### Managed Clusters Summary
- **Total Clusters:** $(echo "$clusters" | wc -l)
- **Available via ACM:** $(oc get managedcluster --no-headers 2>/dev/null | grep -c " True " || echo "0")

---

## Cluster Status Details

EOF

    # Generate status for each cluster
    for cluster_name in $clusters; do
        echo "Checking $cluster_name..."
        
        cat >> "$STATUS_FILE" << EOF
### $cluster_name

#### Cluster Provisioning
$(
    # Check Hive ClusterDeployment
    if oc get clusterdeployment "$cluster_name" -n "$cluster_name" &>/dev/null; then
        local status=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" -o jsonpath='{.status.conditions[?(@.type=="ClusterReadyCondition")].status}' 2>/dev/null || echo "Unknown")
        if [[ "$status" == "True" ]]; then
            echo "- **OCP Cluster:** ✅ Ready (Hive)"
        else
            echo "- **OCP Cluster:** ⏳ Not Ready (Hive)"
        fi
    # Check CAPI Cluster
    elif oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" &>/dev/null; then
        local status=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "Unknown")
        if [[ "$status" == "True" ]]; then
            echo "- **EKS Cluster:** ✅ Ready (CAPI)"
        else
            echo "- **EKS Cluster:** ⏳ Not Ready (CAPI)"
        fi
    else
        echo "- **Cluster:** ❌ Resources not found"
    fi
)

#### ACM Management
$(
    if oc get managedcluster "$cluster_name" &>/dev/null; then
        local status=$(oc get managedcluster "$cluster_name" -o jsonpath='{.status.conditions[?(@.type=="ManagedClusterConditionAvailable")].status}' 2>/dev/null || echo "Unknown")
        if [[ "$status" == "True" ]]; then
            echo "- **ManagedCluster:** ✅ Available"
        else
            echo "- **ManagedCluster:** ❌ Not Available ($status)"
        fi
    else
        echo "- **ManagedCluster:** ❌ Not found"
    fi
)

#### ArgoCD Applications
$(
    local apps=$(oc get application.argoproj.io -n openshift-gitops --no-headers 2>/dev/null | grep "^${cluster_name}-" || true)
    if [[ -n "$apps" ]]; then
        local total=$(echo "$apps" | wc -l)
        local synced=$(echo "$apps" | while read app rest; do
            if oc get application.argoproj.io "$app" -n openshift-gitops -o jsonpath='{.status.sync.status}' 2>/dev/null | grep -q "Synced"; then
                echo "synced"
            fi
        done | wc -l)
        echo "- **Applications:** $synced/$total synced"
        echo "$apps" | while read app rest; do
            local sync_status=$(oc get application.argoproj.io "$app" -n openshift-gitops -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Unknown")
            local health_status=$(oc get application.argoproj.io "$app" -n openshift-gitops -o jsonpath='{.status.health.status}' 2>/dev/null || echo "Unknown")
            if [[ "$sync_status" == "Synced" && "$health_status" == "Healthy" ]]; then
                echo "  - ✅ $app (Synced/Healthy)"
            else
                echo "  - ❌ $app ($sync_status/$health_status)"
            fi
        done
    else
        echo "- **Applications:** ❌ No applications found"
    fi
)

---

EOF
    done

    cat >> "$STATUS_FILE" << EOF
## Quick Commands

\`\`\`bash
# Run health check
./bin/health-check

# Check ArgoCD applications
oc get application.argoproj.io -n openshift-gitops

# Check managed clusters
oc get managedcluster

# Check cluster provisioning
oc get clusterdeployment -A
oc get cluster.cluster.x-k8s.io -A
\`\`\`

## Architecture

See [ARCHITECTURE.md](./ARCHITECTURE.md) for system architecture details.

EOF

    echo "✅ STATUS.md generated successfully"
}

# Main execution
main() {
    echo "Starting OpenShift Bootstrap Health Check..."
    
    check_hub_connection
    generate_status_file
    
    echo "✅ Health check completed. Results in STATUS.md"
}

# Handle script arguments
case "${1:-}" in
    --help|-h)
        echo "OpenShift Bootstrap Health Check Script"
        echo "Usage: $0"
        echo "Generates STATUS.md with current cluster health status."
        exit 0
        ;;
    *)
        main "$@"
        ;;
esac