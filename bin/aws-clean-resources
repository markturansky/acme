#!/bin/bash
set -euo pipefail

# Parse command line arguments
DEBUG=${DEBUG:-false}
SKIP_CHECKS=false
INPUT_FILE=""

# Error trap for debugging
trap 'debug_log "Script error on line $LINENO"' ERR

usage() {
    cat <<EOF
Usage: $0 <input-file.json> [OPTIONS]

DESCRIPTION:
    Process a JSON resource file (from aws-find-resources) and interactively
    select resources for deletion. Creates a deletion list in {input-file}-delete-me.json

ARGUMENTS:
    input-file.json    JSON file containing AWS resources (required)

OPTIONS:
    --debug           Enable debug output
    --skip-checks     Skip all y/N prompts and force delete all resources
    --help            Show this help

EXAMPLES:
    $0 .tmp/aws-resources.json
    $0 cluster-resources.json --debug
    $0 cluster-resources.json --skip-checks

OUTPUT:
    - Interactive resource selection with AWS details
    - Creates {input-file}-delete-me.json with selected resources
EOF
    exit 0
}

for arg in "$@"; do
    case $arg in
        --debug)
            DEBUG=true
            set -x
            ;;
        --skip-checks)
            SKIP_CHECKS=true
            ;;
        --help)
            usage
            ;;
        --*)
            echo "Unknown option: $arg"
            usage
            ;;
        *)
            if [[ -z "$INPUT_FILE" ]]; then
                INPUT_FILE="$arg"
            else
                echo "Error: Multiple input files specified"
                usage
            fi
            ;;
    esac
done

debug_log() {
    if [[ "$DEBUG" == "true" ]]; then
        echo "[DEBUG $(date '+%H:%M:%S')] $*" >&2
    fi
}

echo "=== AWS Resource Cleanup ==="
if [[ "$SKIP_CHECKS" == "true" ]]; then
    echo "This script processes a JSON resource file and automatically deletes ALL resources (--skip-checks enabled)"
else
    echo "This script processes a JSON resource file and prompts for deletion"
fi
echo ""

debug_log "Script started with input file: $INPUT_FILE, SKIP_CHECKS: $SKIP_CHECKS"

# Validate input file
if [[ -z "$INPUT_FILE" ]]; then
    echo "Error: Input file is required"
    usage
fi

if [[ ! -f "$INPUT_FILE" ]]; then
    echo "Error: Input file '$INPUT_FILE' not found"
    exit 1
fi

if ! jq empty "$INPUT_FILE" 2>/dev/null; then
    echo "Error: Input file '$INPUT_FILE' is not valid JSON"
    exit 1
fi

debug_log "Input file validation passed"

# Create output file path
OUTPUT_FILE="${INPUT_FILE%.*}-delete-me.json"
debug_log "Output file will be: $OUTPUT_FILE"

# Extract region from input file
REGION=$(jq -r '.REGION' "$INPUT_FILE" 2>/dev/null || echo "unknown")
debug_log "Detected region: $REGION"

echo "Processing resources from: $INPUT_FILE"
echo "Target region: $REGION"
echo ""

# Initialize selected resources array
selected_resources='[]'

# Function to get additional AWS details for a resource
get_resource_details() {
    local resource_type="$1"
    local resource_id="$2"
    local region="$3"
    
    debug_log "Getting details for $resource_type: $resource_id in $region"
    
    case "$resource_type" in
        "EC2_INSTANCES")
            aws ec2 describe-instances --region "$region" --instance-ids "$resource_id" \
                --query 'Reservations[0].Instances[0].[InstanceType,State.Name,LaunchTime,PrivateIpAddress,PublicIpAddress||`none`,Tags[?Key==`Name`].Value|[0]||`unnamed`]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown unknown unknown"
            ;;
        "EBS_VOLUMES")
            aws ec2 describe-volumes --region "$region" --volume-ids "$resource_id" \
                --query 'Volumes[0].[Size,VolumeType,State,Encrypted,Iops||`0`,Attachments[0].InstanceId||`unattached`]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown unknown unknown"
            ;;
        "APPLICATION_LOAD_BALANCERS"|"CLASSIC_LOAD_BALANCERS")
            if [[ "$resource_type" == "APPLICATION_LOAD_BALANCERS" ]]; then
                aws elbv2 describe-load-balancers --region "$region" --load-balancer-arns "$resource_id" \
                    --query 'LoadBalancers[0].[Type,State.Code,CreatedTime,Scheme]' \
                    --output text 2>/dev/null || echo "unknown unknown unknown unknown"
            else
                aws elb describe-load-balancers --region "$region" --load-balancer-names "$resource_id" \
                    --query 'LoadBalancerDescriptions[0].[Scheme,CreatedTime,VPCId||`classic`]' \
                    --output text 2>/dev/null || echo "unknown unknown unknown"
            fi
            ;;
        "VPCS")
            aws ec2 describe-vpcs --region "$region" --vpc-ids "$resource_id" \
                --query 'Vpcs[0].[CidrBlock,State,IsDefault,Tags[?Key==`Name`].Value|[0]||`unnamed`]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown"
            ;;
        "SUBNETS")
            aws ec2 describe-subnets --region "$region" --subnet-ids "$resource_id" \
                --query 'Subnets[0].[CidrBlock,AvailabilityZone,State,MapPublicIpOnLaunch,Tags[?Key==`Name`].Value|[0]||`unnamed`]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown unknown"
            ;;
        "SECURITY_GROUPS")
            aws ec2 describe-security-groups --region "$region" --group-ids "$resource_id" \
                --query 'SecurityGroups[0].[GroupName,Description,length(IpPermissions),length(IpPermissionsEgress)]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown"
            ;;
        "NAT_GATEWAYS")
            aws ec2 describe-nat-gateways --region "$region" --nat-gateway-ids "$resource_id" \
                --query 'NatGateways[0].[State,NatGatewayAddresses[0].PublicIp||`none`,CreateTime]' \
                --output text 2>/dev/null || echo "unknown unknown unknown"
            ;;
        "INTERNET_GATEWAYS")
            aws ec2 describe-internet-gateways --region "$region" --internet-gateway-ids "$resource_id" \
                --query 'InternetGateways[0].[Attachments[0].State||`detached`,Tags[?Key==`Name`].Value|[0]||`unnamed`]' \
                --output text 2>/dev/null || echo "unknown unknown"
            ;;
        "ROUTE_TABLES")
            aws ec2 describe-route-tables --region "$region" --route-table-ids "$resource_id" \
                --query 'RouteTables[0].[length(Associations),length(Routes),Tags[?Key==`Name`].Value|[0]||`unnamed`]' \
                --output text 2>/dev/null || echo "unknown unknown unknown"
            ;;
        "ELASTIC_IPS")
            aws ec2 describe-addresses --region "$region" --allocation-ids "$resource_id" \
                --query 'Addresses[0].[PublicIp,InstanceId||`unassociated`,NetworkInterfaceId||`none`,Domain]' \
                --output text 2>/dev/null || echo "unknown unknown unknown unknown"
            ;;
        *)
            echo "details-not-implemented"
            ;;
    esac
}

# Function to process each resource type from JSON
process_resource_type() {
    local resource_type="$1"
    local json_path="$2"
    
    debug_log "Processing resource type: $resource_type"
    
    # Check if this resource type has any resources
    local resource_count
    resource_count=$(jq -r "${json_path} | length" "$INPUT_FILE" 2>/dev/null)
    
    if [[ "$resource_count" == "0" || "$resource_count" == "null" ]]; then
        debug_log "No resources found for $resource_type"
        return 0
    fi
    
    echo "=== $resource_type ($resource_count found) ==="
    echo ""
    
    # Process each resource in this type
    local index=0
    while [[ $index -lt $resource_count ]]; do
        local resource_data
        resource_data=$(jq -c "${json_path}[$index]" "$INPUT_FILE" 2>/dev/null)
        
        if [[ "$resource_data" == "null" || -z "$resource_data" ]]; then
            debug_log "Skipping null/empty resource at index $index"
            index=$((index + 1))
            continue
        fi
        
        # Extract resource ID - handle nested array structure
        local resource_id
        # Check if this is a nested array structure (common in aws-find-resources output)
        if echo "$resource_data" | jq -e 'type == "array" and length > 0 and (.[0] | type) == "array"' >/dev/null 2>&1; then
            # Nested array: extract first element of first sub-array
            resource_id=$(echo "$resource_data" | jq -r '.[0][0]' 2>/dev/null)
            debug_log "Detected nested array structure, extracted ID from .[0][0]: $resource_id"
        else
            # Flat array: extract first element
            resource_id=$(echo "$resource_data" | jq -r '.[0]' 2>/dev/null)
            debug_log "Detected flat array structure, extracted ID from .[0]: $resource_id"
        fi
        
        if [[ -z "$resource_id" || "$resource_id" == "null" ]]; then
            debug_log "Skipping resource with null/empty ID at index $index"
            index=$((index + 1))
            continue
        fi
        
        # Validate resource ID format for common AWS resources
        case "$resource_type" in
            "EC2_INSTANCES")
                if [[ ! "$resource_id" =~ ^i-[0-9a-f]{8,17}$ ]]; then
                    echo "⚠️  WARNING: Invalid EC2 instance ID format: '$resource_id'"
                    echo "  Expected format: i-xxxxxxxxx, got: $resource_id"
                    echo "  This might be an instance type instead of instance ID"
                    echo "  Raw data: $resource_data"
                    echo "  Skipping this resource..."
                    echo ""
                    index=$((index + 1))
                    continue
                fi
                ;;
            "EBS_VOLUMES")
                if [[ ! "$resource_id" =~ ^vol-[0-9a-f]{8,17}$ ]]; then
                    echo "⚠️  WARNING: Invalid EBS volume ID format: '$resource_id'"
                    echo "  Expected format: vol-xxxxxxxxx, got: $resource_id"
                    echo "  Raw data: $resource_data"
                    echo "  Skipping this resource..."
                    echo ""
                    index=$((index + 1))
                    continue
                fi
                ;;
            "VPCS")
                if [[ ! "$resource_id" =~ ^vpc-[0-9a-f]{8,17}$ ]]; then
                    echo "⚠️  WARNING: Invalid VPC ID format: '$resource_id'"
                    echo "  Expected format: vpc-xxxxxxxxx, got: $resource_id"
                    echo "  Raw data: $resource_data"
                    echo "  Skipping this resource..."
                    echo ""
                    index=$((index + 1))
                    continue
                fi
                ;;
            "SUBNETS")
                if [[ ! "$resource_id" =~ ^subnet-[0-9a-f]{8,17}$ ]]; then
                    echo "⚠️  WARNING: Invalid subnet ID format: '$resource_id'"
                    echo "  Expected format: subnet-xxxxxxxxx, got: $resource_id"
                    echo "  Raw data: $resource_data"
                    echo "  Skipping this resource..."
                    echo ""
                    index=$((index + 1))
                    continue
                fi
                ;;
            "SECURITY_GROUPS")
                if [[ ! "$resource_id" =~ ^sg-[0-9a-f]{8,17}$ ]]; then
                    echo "⚠️  WARNING: Invalid security group ID format: '$resource_id'"
                    echo "  Expected format: sg-xxxxxxxxx, got: $resource_id"
                    echo "  Raw data: $resource_data"
                    echo "  Skipping this resource..."
                    echo ""
                    index=$((index + 1))
                    continue
                fi
                ;;
        esac
        
        debug_log "Processing resource $index: $resource_id"
        
        # Get additional details from AWS
        local details
        details=$(get_resource_details "$resource_type" "$resource_id" "$REGION")
        
        # Display resource information
        echo "Resource: $resource_id"
        echo "  Raw data: $resource_data"
        if [[ "$details" != "details-not-implemented" ]]; then
            echo "  AWS details: $details"
        fi
        echo ""
        
        # Prompt for deletion (default is No) or auto-select if --skip-checks
        local response=""
        if [[ "$SKIP_CHECKS" == "true" ]]; then
            response="y"
            echo "Auto-selected for deletion (--skip-checks): $resource_id"
            debug_log "Auto-selected resource due to --skip-checks: $resource_id"
        else
            debug_log "About to prompt for resource: $resource_id"
            read -p "Delete this $resource_type resource? (y/N): " response || {
                debug_log "Read command failed for resource: $resource_id"
                echo "  Skipped due to input error: $resource_id"
                echo ""
                index=$((index + 1))
                continue
            }
            debug_log "User response for $resource_id: '$response'"
        fi
        
        if [[ "$response" =~ ^[Yy]$ ]]; then
            echo "✓ Marked for deletion: $resource_id"
            
            # Add to selected resources
            local resource_entry
            resource_entry=$(jq -n --arg type "$resource_type" --arg id "$resource_id" --argjson data "$resource_data" --arg details "$details" \
                '{type: $type, id: $id, raw_data: $data, aws_details: $details}') || {
                debug_log "Failed to create JSON entry for: $resource_id"
                echo "  Error processing selection for: $resource_id"
                echo ""
                index=$((index + 1))
                continue
            }
            
            selected_resources=$(echo "$selected_resources" | jq --argjson entry "$resource_entry" '. += [$entry]') || {
                debug_log "Failed to add to selected_resources: $resource_id" 
                echo "  Error adding to selection: $resource_id"
                echo ""
                index=$((index + 1))
                continue
            }
            debug_log "Added to selection: $resource_type $resource_id"
        else
            echo "  Skipped: $resource_id"
        fi

        index=$((index + 1))
    done
    
    debug_log "Finished processing $resource_type: processed $index resources"
}

# Define dependency-aware deletion order (resources must be deleted in this order)
# Phase 1: Disconnect and stop services
get_deletion_order_phase1() {
    cat <<EOF
EC2_INSTANCES
EBS_SNAPSHOTS
APPLICATION_LOAD_BALANCERS
CLASSIC_LOAD_BALANCERS
TARGET_GROUPS
AUTO_SCALING_GROUPS
LAUNCH_TEMPLATES
EKS_CLUSTERS
RDS_INSTANCES
RDS_CLUSTERS
VPC_ENDPOINTS
NAT_GATEWAYS
ECR_REPOSITORIES
CLOUDFORMATION_STACKS
EBS_VOLUMES
EOF
}

# Phase 2: Clean up networking and dependencies after services are fully gone
get_deletion_order_phase2() {
    cat <<EOF
ROUTE_TABLES
INTERNET_GATEWAYS
NETWORK_INTERFACES
SECURITY_GROUPS
NETWORK_ACLS
EFS_MOUNT_TARGETS
EFS_FILE_SYSTEMS
SUBNETS
ELASTIC_IPS
VPCS
IAM_INSTANCE_PROFILES
IAM_POLICIES
IAM_ROLES
EOF
}

# Helper function to extract data from raw_data (handles nested arrays)
extract_raw_data_element() {
    local raw_data="$1"
    local index="$2"
    
    # Check if raw_data is a nested array structure
    if echo "$raw_data" | jq -e 'type == "array" and length > 0 and (.[0] | type) == "array"' >/dev/null 2>&1; then
        # Nested array: extract from first sub-array
        echo "$raw_data" | jq -r ".[0][$index]" 2>/dev/null
    else
        # Flat array: extract directly
        echo "$raw_data" | jq -r ".[$index]" 2>/dev/null
    fi
}

# Function to delete a single AWS resource
delete_aws_resource() {
    local resource_type="$1"
    local resource_id="$2"
    local region="$3"
    local raw_data="$4"
    
    debug_log "Deleting $resource_type: $resource_id in $region"
    echo "Deleting $resource_type: $resource_id"
    
    case "$resource_type" in
        "EC2_INSTANCES")
            aws ec2 terminate-instances --region "$region" --instance-ids "$resource_id"
            echo "  ✓ EC2 instance termination initiated"
            ;;
        "EBS_VOLUMES")
            aws ec2 delete-volume --region "$region" --volume-id "$resource_id"
            echo "  ✓ EBS volume deleted"
            ;;
        "EBS_SNAPSHOTS")
            aws ec2 delete-snapshot --region "$region" --snapshot-id "$resource_id"
            echo "  ✓ EBS snapshot deleted"
            ;;
        "APPLICATION_LOAD_BALANCERS")
            aws elbv2 delete-load-balancer --region "$region" --load-balancer-arn "$resource_id"
            echo "  ✓ Application Load Balancer deletion initiated"
            # Wait for load balancer to be fully deleted to avoid dependency violations
            echo "  ⏳ Waiting for load balancer to be fully deleted..."
            local wait_count=0
            while [[ $wait_count -lt 30 ]]; do
                if ! aws elbv2 describe-load-balancers --region "$region" --load-balancer-arns "$resource_id" >/dev/null 2>&1; then
                    echo "  ✅ Load balancer fully deleted"
                    break
                fi
                sleep 10
                wait_count=$((wait_count + 1))
                echo "  ⏳ Still waiting... ($((wait_count * 10))s)"
            done
            ;;
        "CLASSIC_LOAD_BALANCERS")
            aws elb delete-load-balancer --region "$region" --load-balancer-name "$resource_id"
            echo "  ✓ Classic Load Balancer deleted"
            ;;
        "TARGET_GROUPS")
            aws elbv2 delete-target-group --region "$region" --target-group-arn "$resource_id"
            echo "  ✓ Target Group deleted"
            ;;
        "AUTO_SCALING_GROUPS")
            aws autoscaling delete-auto-scaling-group --region "$region" --auto-scaling-group-name "$resource_id" --force-delete
            echo "  ✓ Auto Scaling Group deletion initiated"
            ;;
        "LAUNCH_TEMPLATES")
            aws ec2 delete-launch-template --region "$region" --launch-template-id "$resource_id"
            echo "  ✓ Launch Template deleted"
            ;;
        "VPCS")
            # Comprehensive VPC cleanup - handle all remaining dependencies
            echo "  🧹 Performing comprehensive VPC dependency cleanup..."
            
            # 1. Check for and delete VPC peering connections
            echo "  ⏳ Checking for VPC peering connections..."
            local peering_connections
            peering_connections=$(aws ec2 describe-vpc-peering-connections --region "$region" \
                --filters "Name=requester-vpc-info.vpc-id,Values=$resource_id" "Name=accepter-vpc-info.vpc-id,Values=$resource_id" \
                --query 'VpcPeeringConnections[?Status.Code!=`deleted`].VpcPeeringConnectionId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$peering_connections" && "$peering_connections" != "None" ]]; then
                for pcx_id in $peering_connections; do
                    echo "    Deleting VPC peering connection: $pcx_id"
                    aws ec2 delete-vpc-peering-connection --region "$region" --vpc-peering-connection-id "$pcx_id" 2>/dev/null || true
                done
                sleep 10
            fi
            
            # 2. Check for remaining VPC endpoints
            echo "  ⏳ Checking for remaining VPC endpoints..."
            local vpc_endpoints
            vpc_endpoints=$(aws ec2 describe-vpc-endpoints --region "$region" \
                --filters "Name=vpc-id,Values=$resource_id" \
                --query 'VpcEndpoints[?State!=`deleted`].VpcEndpointId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$vpc_endpoints" && "$vpc_endpoints" != "None" ]]; then
                for vpce_id in $vpc_endpoints; do
                    echo "    Deleting remaining VPC endpoint: $vpce_id"
                    aws ec2 delete-vpc-endpoints --region "$region" --vpc-endpoint-ids "$vpce_id" 2>/dev/null || true
                done
                sleep 15
            fi
            
            # 3. Check for remaining network ACLs (except default)
            echo "  ⏳ Checking for custom network ACLs..."
            local custom_nacls
            custom_nacls=$(aws ec2 describe-network-acls --region "$region" \
                --filters "Name=vpc-id,Values=$resource_id" "Name=default,Values=false" \
                --query 'NetworkAcls[].NetworkAclId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$custom_nacls" && "$custom_nacls" != "None" ]]; then
                for nacl_id in $custom_nacls; do
                    echo "    Deleting custom network ACL: $nacl_id"
                    aws ec2 delete-network-acl --region "$region" --network-acl-id "$nacl_id" 2>/dev/null || true
                done
                sleep 5
            fi
            
            # 4. Check for DHCP options sets (except default)
            echo "  ⏳ Checking for custom DHCP options sets..."
            local dhcp_options_id
            dhcp_options_id=$(aws ec2 describe-vpcs --region "$region" --vpc-ids "$resource_id" \
                --query 'Vpcs[0].DhcpOptionsId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$dhcp_options_id" && "$dhcp_options_id" != "None" && "$dhcp_options_id" != "default" ]]; then
                echo "    Dissociating custom DHCP options set: $dhcp_options_id"
                aws ec2 associate-dhcp-options --region "$region" --dhcp-options-id default --vpc-id "$resource_id" 2>/dev/null || true
                sleep 5
                echo "    Deleting custom DHCP options set: $dhcp_options_id"
                aws ec2 delete-dhcp-options --region "$region" --dhcp-options-id "$dhcp_options_id" 2>/dev/null || true
            fi
            
            # 5. Final check for any remaining network interfaces
            echo "  ⏳ Final check for remaining network interfaces..."
            local remaining_enis
            remaining_enis=$(aws ec2 describe-network-interfaces --region "$region" \
                --filters "Name=vpc-id,Values=$resource_id" \
                --query 'NetworkInterfaces[].NetworkInterfaceId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$remaining_enis" && "$remaining_enis" != "None" ]]; then
                echo "    Found remaining network interfaces, attempting cleanup: $remaining_enis"
                for eni in $remaining_enis; do
                    # Try to detach if attached
                    attachment_id=$(aws ec2 describe-network-interfaces --region "$region" --network-interface-ids "$eni" \
                        --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text 2>/dev/null || echo "")
                    if [[ -n "$attachment_id" && "$attachment_id" != "None" && "$attachment_id" != "null" ]]; then
                        echo "      Detaching network interface: $eni"
                        aws ec2 detach-network-interface --region "$region" --attachment-id "$attachment_id" --force 2>/dev/null || true
                        sleep 5
                    fi
                    echo "      Deleting network interface: $eni"
                    aws ec2 delete-network-interface --region "$region" --network-interface-id "$eni" 2>/dev/null || true
                done
                sleep 10
            fi
            
            # 6. Retry VPC deletion with extended backoff
            echo "  🎯 Attempting VPC deletion with comprehensive retry logic..."
            local retry_count=0
            while [[ $retry_count -lt 8 ]]; do
                if aws ec2 delete-vpc --region "$region" --vpc-id "$resource_id" 2>/dev/null; then
                    echo "  ✅ VPC deleted successfully"
                    break
                else
                    retry_count=$((retry_count + 1))
                    local wait_time=$((retry_count * 15))  # Progressive backoff: 15s, 30s, 45s, etc.
                    echo "  ⏳ VPC deletion failed (attempt $retry_count/8), waiting ${wait_time}s for all dependencies to clear..."
                    
                    if [[ $retry_count -eq 4 ]]; then
                        echo "    🔍 Performing mid-retry dependency scan..."
                        # Quick check for what's still blocking
                        aws ec2 describe-vpcs --region "$region" --vpc-ids "$resource_id" \
                            --query 'Vpcs[0]' --output table 2>/dev/null || true
                    fi
                    
                    sleep "$wait_time"
                fi
                
                if [[ $retry_count -eq 8 ]]; then
                    echo "  ❌ VPC deletion failed after 8 attempts - dependencies may remain"
                    echo "    💡 Suggestion: Check AWS console for remaining resources in this VPC"
                    echo "    🔍 Resources that commonly block VPC deletion:"
                    echo "      - Network interfaces (ENIs) attached to instances or load balancers"
                    echo "      - VPC peering connections"
                    echo "      - VPN connections"
                    echo "      - Customer gateways"
                    echo "      - VPC endpoints"
                    echo "      - Transit gateway attachments"
                    return 1
                fi
            done
            ;;
        "SUBNETS")
            # Check for network interfaces in the subnet before deletion
            echo "  ⏳ Checking for network interfaces in subnet..."
            local subnet_enis
            subnet_enis=$(aws ec2 describe-network-interfaces --region "$region" \
                --filters "Name=subnet-id,Values=$resource_id" \
                --query 'NetworkInterfaces[].NetworkInterfaceId' --output text 2>/dev/null || echo "")
            
            if [[ -n "$subnet_enis" && "$subnet_enis" != "None" ]]; then
                echo "    Found network interfaces in subnet, attempting cleanup: $subnet_enis"
                for eni in $subnet_enis; do
                    # Get ENI details
                    eni_info=$(aws ec2 describe-network-interfaces --region "$region" --network-interface-ids "$eni" \
                        --query 'NetworkInterfaces[0].[RequesterManaged,Attachment.AttachmentId,Description]' --output text 2>/dev/null || echo "")
                    
                    if [[ -n "$eni_info" ]]; then
                        local requester_managed=$(echo "$eni_info" | cut -f1)
                        local attachment_id=$(echo "$eni_info" | cut -f2)
                        local description=$(echo "$eni_info" | cut -f3)
                        
                        echo "      Processing ENI: $eni ($description)"
                        
                        # Try to detach if attached
                        if [[ -n "$attachment_id" && "$attachment_id" != "None" && "$attachment_id" != "null" ]]; then
                            echo "        Detaching network interface..."
                            local detach_error
                            if detach_error=$(aws ec2 detach-network-interface --region "$region" --attachment-id "$attachment_id" --force 2>&1); then
                                echo "        ✓ Network interface detached"
                                sleep 5
                            else
                                if [[ "$detach_error" == *"You do not have permission"* ]]; then
                                    echo "        ⚠️  Permission denied: Cannot detach ENI $eni"
                                    echo "        💡 Manual action required: Add ec2:DetachNetworkInterface permission"
                                    echo "        📋 ENI ARN: arn:aws:ec2:$region:$(aws sts get-caller-identity --query Account --output text):network-interface/$eni"
                                    echo "        ⏭️  Skipping this ENI - subnet deletion may fail"
                                    continue
                                else
                                    echo "        ⚠️  Detach failed: $detach_error"
                                fi
                            fi
                        fi
                        
                        # Delete the network interface
                        echo "        Deleting network interface..."
                        local delete_error
                        if delete_error=$(aws ec2 delete-network-interface --region "$region" --network-interface-id "$eni" 2>&1); then
                            echo "        ✓ Network interface deleted"
                        else
                            if [[ "$delete_error" == *"You do not have permission"* ]]; then
                                echo "        ⚠️  Permission denied: Cannot delete ENI $eni"
                                echo "        💡 Manual action required: Add ec2:DeleteNetworkInterface permission"
                            elif [[ "$delete_error" == *"currently in use"* ]]; then
                                echo "        ⚠️  ENI still in use (AWS-managed service dependency)"
                            else
                                echo "        ⚠️  Delete failed: $delete_error"
                            fi
                        fi
                    fi
                done
                sleep 10  # Allow time for cleanup to complete
            fi
            
            # Retry subnet deletion as it might have lingering dependencies
            local retry_count=0
            while [[ $retry_count -lt 3 ]]; do
                local subnet_delete_error
                if subnet_delete_error=$(aws ec2 delete-subnet --region "$region" --subnet-id "$resource_id" 2>&1); then
                    echo "  ✓ Subnet deleted"
                    break
                else
                    retry_count=$((retry_count + 1))
                    if [[ "$subnet_delete_error" == *"network interface"* ]]; then
                        echo "  ⏳ Subnet deletion failed due to network interfaces (attempt $retry_count/3)"
                        echo "    Check for remaining ENIs or permission issues above"
                    else
                        echo "  ⏳ Subnet deletion failed (attempt $retry_count/3): $subnet_delete_error"
                    fi
                    
                    if [[ $retry_count -lt 3 ]]; then
                        echo "    Waiting 20s for dependencies to clear..."
                        sleep 20
                    fi
                fi
                
                if [[ $retry_count -eq 3 ]]; then
                    echo "  ❌ Subnet deletion failed after 3 attempts"
                    if [[ "$subnet_delete_error" == *"network interface"* ]]; then
                        echo "  💡 Likely cause: Network interfaces still exist due to permission issues"
                        echo "  🔧 Manual action: Check EC2 console for remaining ENIs in this subnet"
                    fi
                    return 1
                fi
            done
            ;;
        "INTERNET_GATEWAYS")
            # Need to detach first, extract VPC ID from raw data
            local vpc_id
            vpc_id=$(extract_raw_data_element "$raw_data" 1)
            if [[ -n "$vpc_id" && "$vpc_id" != "null" ]]; then
                echo "  ⏳ Detaching Internet Gateway from VPC..."
                aws ec2 detach-internet-gateway --region "$region" --internet-gateway-id "$resource_id" --vpc-id "$vpc_id" 2>/dev/null || true
                sleep 5  # Give time for detachment
            fi
            
            # Retry Internet Gateway deletion
            local retry_count=0
            while [[ $retry_count -lt 3 ]]; do
                if aws ec2 delete-internet-gateway --region "$region" --internet-gateway-id "$resource_id" 2>/dev/null; then
                    echo "  ✓ Internet Gateway detached and deleted"
                    break
                else
                    retry_count=$((retry_count + 1))
                    echo "  ⏳ Internet Gateway deletion failed (attempt $retry_count/3), waiting 15s..."
                    sleep 15
                fi
                
                if [[ $retry_count -eq 3 ]]; then
                    echo "  ❌ Internet Gateway deletion failed after 3 attempts"
                    return 1
                fi
            done
            ;;
        "NAT_GATEWAYS")
            aws ec2 delete-nat-gateway --region "$region" --nat-gateway-id "$resource_id"
            echo "  ✓ NAT Gateway deletion initiated"
            # Wait for NAT gateway to be fully deleted to avoid dependency violations
            echo "  ⏳ Waiting for NAT gateway to be fully deleted..."
            local wait_count=0
            while [[ $wait_count -lt 30 ]]; do
                local nat_status
                nat_status=$(aws ec2 describe-nat-gateways --region "$region" --nat-gateway-ids "$resource_id" --query 'NatGateways[0].State' --output text 2>/dev/null || echo "deleted")
                if [[ "$nat_status" == "deleted" ]]; then
                    echo "  ✅ NAT gateway fully deleted"
                    break
                fi
                sleep 15
                wait_count=$((wait_count + 1))
                echo "  ⏳ Still waiting... ($((wait_count * 15))s) - Status: $nat_status"
            done
            ;;
        "ROUTE_TABLES")
            # Check if this is the main route table (cannot be deleted)
            local is_main_route_table
            is_main_route_table=$(echo "$resource_raw_data" | jq -r '.[2]' 2>/dev/null || echo "false")
            
            if [[ "$is_main_route_table" == "true" ]]; then
                echo "  ⏭️  Skipping main route table - will be deleted automatically with VPC"
                echo "  ✓ Main route table marked for VPC cleanup"
                return 0
            fi
            
            # Clear routes first
            echo "  ⏳ Clearing non-local routes from route table..."
            routes=$(aws ec2 describe-route-tables --region "$region" --route-table-ids "$resource_id" --query 'RouteTables[0].Routes[?GatewayId!=`local`]' --output json 2>/dev/null || echo "[]")
            if [[ "$routes" != "[]" && "$routes" != "null" ]]; then
                echo "$routes" | jq -r '.[] | select(.GatewayId != "local") | .DestinationCidrBlock // .DestinationPrefixListId' | while read -r destination; do
                    if [[ -n "$destination" ]]; then
                        if [[ "$destination" =~ ^pl- ]]; then
                            aws ec2 delete-route --region "$region" --route-table-id "$resource_id" --destination-prefix-list-id "$destination" 2>/dev/null || true
                        else
                            aws ec2 delete-route --region "$region" --route-table-id "$resource_id" --destination-cidr-block "$destination" 2>/dev/null || true
                        fi
                    fi
                done
                sleep 5  # Give time for route cleanup
            fi
            
            # Disassociate any explicit subnet associations (main association is automatic)
            echo "  ⏳ Checking for subnet associations to disassociate..."
            associations=$(aws ec2 describe-route-tables --region "$region" --route-table-ids "$resource_id" --query 'RouteTables[0].Associations[?Main==`false`].RouteTableAssociationId' --output text 2>/dev/null || echo "")
            if [[ -n "$associations" && "$associations" != "None" ]]; then
                for assoc_id in $associations; do
                    echo "  Disassociating route table from subnet: $assoc_id"
                    aws ec2 disassociate-route-table --region "$region" --association-id "$assoc_id" 2>/dev/null || true
                done
                sleep 5
            fi
            
            # Retry route table deletion
            local retry_count=0
            while [[ $retry_count -lt 3 ]]; do
                if aws ec2 delete-route-table --region "$region" --route-table-id "$resource_id" 2>/dev/null; then
                    echo "  ✓ Route Table cleared and deleted"
                    break
                else
                    retry_count=$((retry_count + 1))
                    echo "  ⏳ Route table deletion failed (attempt $retry_count/3), waiting 15s..."
                    sleep 15
                fi
                
                if [[ $retry_count -eq 3 ]]; then
                    echo "  ❌ Route table deletion failed after 3 attempts"
                    return 1
                fi
            done
            ;;
        "SECURITY_GROUPS")
            # Clear rules first
            echo "  ⏳ Clearing security group rules..."
            inbound_rules=$(aws ec2 describe-security-groups --region "$region" --group-ids "$resource_id" --query 'SecurityGroups[0].IpPermissions' --output json 2>/dev/null || echo "[]")
            if [[ "$inbound_rules" != "[]" && "$inbound_rules" != "null" ]]; then
                aws ec2 revoke-security-group-ingress --region "$region" --group-id "$resource_id" --ip-permissions "$inbound_rules" 2>/dev/null || true
            fi
            outbound_rules=$(aws ec2 describe-security-groups --region "$region" --group-ids "$resource_id" --query 'SecurityGroups[0].IpPermissionsEgress[?!(IpProtocol==`-1` && IpRanges[0].CidrIp==`0.0.0.0/0`)]' --output json 2>/dev/null || echo "[]")
            if [[ "$outbound_rules" != "[]" && "$outbound_rules" != "null" ]]; then
                aws ec2 revoke-security-group-egress --region "$region" --group-id "$resource_id" --ip-permissions "$outbound_rules" 2>/dev/null || true
            fi
            
            # Retry deletion with backoff for dependency violations
            local retry_count=0
            while [[ $retry_count -lt 5 ]]; do
                if aws ec2 delete-security-group --region "$region" --group-id "$resource_id" 2>/dev/null; then
                    echo "  ✓ Security Group rules cleared and group deleted"
                    break
                else
                    retry_count=$((retry_count + 1))
                    echo "  ⏳ Security group deletion failed (attempt $retry_count/5), waiting 15s for dependencies to clear..."
                    sleep 15
                fi
                
                if [[ $retry_count -eq 5 ]]; then
                    echo "  ❌ Security group deletion failed after 5 attempts - may have remaining dependencies"
                    return 1
                fi
            done
            ;;
        "NETWORK_ACLS")
            aws ec2 delete-network-acl --region "$region" --network-acl-id "$resource_id"
            echo "  ✓ Network ACL deleted"
            ;;
        "NETWORK_INTERFACES")
            # Check if attached and detach first
            attachment=$(aws ec2 describe-network-interfaces --region "$region" --network-interface-ids "$resource_id" --query 'NetworkInterfaces[0].Attachment.AttachmentId' --output text 2>/dev/null || echo "None")
            if [[ "$attachment" != "None" && "$attachment" != "null" && -n "$attachment" ]]; then
                echo "  ⏳ Detaching network interface..."
                aws ec2 detach-network-interface --region "$region" --attachment-id "$attachment" --force
                sleep 10  # Give more time for detachment
            fi
            # Wait a bit more to ensure detachment is complete
            sleep 5
            aws ec2 delete-network-interface --region "$region" --network-interface-id "$resource_id"
            echo "  ✓ Network Interface detached and deleted"
            ;;
        "VPC_ENDPOINTS")
            aws ec2 delete-vpc-endpoints --region "$region" --vpc-endpoint-ids "$resource_id"
            echo "  ✓ VPC Endpoint deletion initiated"
            ;;
        "ELASTIC_IPS")
            aws ec2 release-address --region "$region" --allocation-id "$resource_id"
            echo "  ✓ Elastic IP released"
            ;;
        "EFS_FILE_SYSTEMS")
            aws efs delete-file-system --region "$region" --file-system-id "$resource_id"
            echo "  ✓ EFS File System deletion initiated"
            ;;
        "EFS_MOUNT_TARGETS")
            aws efs delete-mount-target --region "$region" --mount-target-id "$resource_id"
            echo "  ✓ EFS Mount Target deleted"
            ;;
        "RDS_INSTANCES")
            aws rds delete-db-instance --region "$region" --db-instance-identifier "$resource_id" --skip-final-snapshot
            echo "  ✓ RDS Instance deletion initiated"
            ;;
        "RDS_CLUSTERS")
            aws rds delete-db-cluster --region "$region" --db-cluster-identifier "$resource_id" --skip-final-snapshot
            echo "  ✓ RDS Cluster deletion initiated"
            ;;
        "EKS_CLUSTERS")
            aws eks delete-cluster --region "$region" --name "$resource_id"
            echo "  ✓ EKS Cluster deletion initiated"
            ;;
        "ECR_REPOSITORIES")
            aws ecr delete-repository --region "$region" --repository-name "$resource_id" --force
            echo "  ✓ ECR Repository deleted"
            ;;
        "CLOUDFORMATION_STACKS")
            aws cloudformation delete-stack --region "$region" --stack-name "$resource_id"
            echo "  ✓ CloudFormation Stack deletion initiated"
            ;;
        "IAM_ROLES")
            # Delete attached policies first
            attached_policies=$(aws iam list-attached-role-policies --role-name "$resource_id" --query 'AttachedPolicies[*].PolicyArn' --output text 2>/dev/null || echo "")
            for policy_arn in $attached_policies; do
                [[ -n "$policy_arn" ]] && aws iam detach-role-policy --role-name "$resource_id" --policy-arn "$policy_arn" 2>/dev/null || true
            done
            # Delete inline policies
            inline_policies=$(aws iam list-role-policies --role-name "$resource_id" --query 'PolicyNames' --output text 2>/dev/null || echo "")
            for policy_name in $inline_policies; do
                [[ -n "$policy_name" ]] && aws iam delete-role-policy --role-name "$resource_id" --policy-name "$policy_name" 2>/dev/null || true
            done
            aws iam delete-role --role-name "$resource_id"
            echo "  ✓ IAM Role and policies deleted"
            ;;
        "IAM_POLICIES")
            aws iam delete-policy --policy-arn "$resource_id"
            echo "  ✓ IAM Policy deleted"
            ;;
        "IAM_INSTANCE_PROFILES")
            # Remove roles from instance profile first
            roles=$(aws iam get-instance-profile --instance-profile-name "$resource_id" --query 'InstanceProfile.Roles[*].RoleName' --output text 2>/dev/null || echo "")
            for role_name in $roles; do
                [[ -n "$role_name" ]] && aws iam remove-role-from-instance-profile --instance-profile-name "$resource_id" --role-name "$role_name" 2>/dev/null || true
            done
            aws iam delete-instance-profile --instance-profile-name "$resource_id"
            echo "  ✓ IAM Instance Profile deleted"
            ;;
        *)
            echo "  ⚠ Resource type $resource_type not supported for deletion"
            return 1
            ;;
    esac
    
    return 0
}

# Function to execute all resource deletions from manifest file
execute_resource_deletions() {
    local manifest_file="$1"
    
    debug_log "Starting resource deletion execution from: $manifest_file"
    
    if [[ ! -f "$manifest_file" ]]; then
        echo "❌ Error: Manifest file not found: $manifest_file"
        return 1
    fi
    
    # Extract region and resources from manifest
    local region
    region=$(jq -r '.metadata.region' "$manifest_file" 2>/dev/null)
    local total_resources
    total_resources=$(jq -r '.selected_resources | length' "$manifest_file" 2>/dev/null)
    
    echo "Region: $region"
    echo "Total resources to delete: $total_resources"
    echo ""
    
    local processed=0
    local failed=0
    local phase1_resources_processed=0
    
    echo "🏗️  === Phase 1: Stopping Services and Load Balancers ==="
    echo ""
    
    # Phase 1: Stop all services first
    local deletion_order_phase1
    deletion_order_phase1=$(get_deletion_order_phase1)
    
    while IFS= read -r resource_type; do
        debug_log "Processing resource type: $resource_type"
        
        # Get all resources of this type from manifest
        local resources_of_type
        resources_of_type=$(jq -r --arg type "$resource_type" '.selected_resources[] | select(.type == $type) | @base64' "$manifest_file" 2>/dev/null)
        
        if [[ -z "$resources_of_type" ]]; then
            debug_log "No resources found for type: $resource_type"
            continue
        fi
        
        
        echo "=== Deleting $resource_type resources ==="
        
        while IFS= read -r resource_b64; do
            [[ -z "$resource_b64" ]] && continue
            
            local resource_json
            resource_json=$(echo "$resource_b64" | base64 --decode)
            
            local resource_id resource_raw_data
            resource_id=$(echo "$resource_json" | jq -r '.id')
            resource_raw_data=$(echo "$resource_json" | jq -c '.raw_data')
            
            debug_log "Deleting resource: $resource_id"
            
            if delete_aws_resource "$resource_type" "$resource_id" "$region" "$resource_raw_data"; then
                processed=$((processed + 1))
                phase1_resources_processed=$((phase1_resources_processed + 1))
                echo ""
            else
                echo "  ❌ Failed to delete: $resource_id"
                failed=$((failed + 1))
                echo ""
            fi
            
        done <<< "$resources_of_type"
        
    done <<< "$deletion_order_phase1"
    
    echo ""
    if [[ $phase1_resources_processed -gt 0 ]]; then
        echo "⏸️  === Phase 1 Complete - Waiting for AWS Services to Fully Terminate ==="
        echo "Waiting 60 seconds for all services to fully terminate and release network interfaces..."
        sleep 60
        echo ""
    else
        echo "⏸️  === Phase 1 Complete - No services to terminate, proceeding immediately ==="
        echo ""
    fi
    
    echo "🧹 === Phase 2: Cleaning Up Networking and Infrastructure ==="
    echo ""
    
    # Phase 2: Clean up networking after services are gone
    local deletion_order_phase2
    deletion_order_phase2=$(get_deletion_order_phase2)
    
    while IFS= read -r resource_type; do
        debug_log "Processing resource type: $resource_type (Phase 2)"
        
        # Get all resources of this type from manifest
        local resources_of_type
        resources_of_type=$(jq -r --arg type "$resource_type" '.selected_resources[] | select(.type == $type) | @base64' "$manifest_file" 2>/dev/null)
        
        if [[ -z "$resources_of_type" ]]; then
            debug_log "No resources found for type: $resource_type"
            continue
        fi
        
        # Add special handling for problematic resource types
        if [[ "$resource_type" == "SECURITY_GROUPS" ]]; then
            echo "🔒 Waiting extra time before security group deletion to ensure all network interfaces are cleaned up..."
            sleep 30
            
            # Clean up any remaining network interfaces that might be blocking security group deletion
            echo "🧹 Checking for orphaned network interfaces that might reference security groups..."
            local vpc_id
            vpc_id=$(jq -r '.selected_resources[] | select(.type == "VPCS") | .id' "$manifest_file" 2>/dev/null | head -1)
            if [[ -n "$vpc_id" && "$vpc_id" != "null" ]]; then
                # Find any remaining network interfaces in the VPC
                local orphaned_enis
                orphaned_enis=$(aws ec2 describe-network-interfaces --region "$region" \
                    --filters "Name=vpc-id,Values=$vpc_id" "Name=status,Values=available" \
                    --query 'NetworkInterfaces[*].NetworkInterfaceId' --output text 2>/dev/null || echo "")
                
                if [[ -n "$orphaned_enis" && "$orphaned_enis" != "None" ]]; then
                    echo "🗑️  Found orphaned network interfaces, cleaning up: $orphaned_enis"
                    for eni in $orphaned_enis; do
                        echo "  Deleting orphaned ENI: $eni"
                        aws ec2 delete-network-interface --region "$region" --network-interface-id "$eni" 2>/dev/null || echo "    ⚠️  Could not delete $eni"
                    done
                    sleep 10  # Give time for cleanup
                fi
            fi
        fi
        
        if [[ "$resource_type" == "SUBNETS" ]]; then
            echo "🏗️  Waiting before subnet deletion to ensure route tables are fully cleaned up..."
            sleep 15
        fi
        
        if [[ "$resource_type" == "INTERNET_GATEWAYS" ]]; then
            echo "🌐 Ensuring all route table associations are cleared before Internet Gateway deletion..."
            sleep 10
        fi
        
        echo "=== Deleting $resource_type resources ==="
        
        while IFS= read -r resource_b64; do
            [[ -z "$resource_b64" ]] && continue
            
            local resource_json
            resource_json=$(echo "$resource_b64" | base64 --decode)
            
            local resource_id resource_raw_data
            resource_id=$(echo "$resource_json" | jq -r '.id')
            resource_raw_data=$(echo "$resource_json" | jq -c '.raw_data')
            
            debug_log "Deleting resource: $resource_id (Phase 2)"
            
            if delete_aws_resource "$resource_type" "$resource_id" "$region" "$resource_raw_data"; then
                processed=$((processed + 1))
                echo ""
            else
                echo "  ❌ Failed to delete: $resource_id"
                failed=$((failed + 1))
                echo ""
            fi
            
        done <<< "$resources_of_type"
        
    done <<< "$deletion_order_phase2"
    
    echo "=== Deletion Summary ==="
    echo "Successfully processed: $processed"
    echo "Failed: $failed"
    echo "Total: $((processed + failed))"
    
    if [[ $failed -gt 0 ]]; then
        echo ""
        echo "⚠ Some deletions failed. Check AWS console for remaining resources."
        echo "Resources may have dependencies that prevent deletion or may no longer exist."
    fi
    
    debug_log "Resource deletion execution completed"
}

# Main execution
debug_log "Starting main execution..."

echo "Starting resource processing..."
echo ""

# Define the resource types to process in order
resource_types=(
    "EC2_INSTANCES:.EC2_INSTANCES"
    "EBS_VOLUMES:.EBS_VOLUMES" 
    "EBS_SNAPSHOTS:.EBS_SNAPSHOTS"
    "APPLICATION_LOAD_BALANCERS:.APPLICATION_LOAD_BALANCERS"
    "CLASSIC_LOAD_BALANCERS:.CLASSIC_LOAD_BALANCERS"
    "TARGET_GROUPS:.TARGET_GROUPS"
    "AUTO_SCALING_GROUPS:.AUTO_SCALING_GROUPS"
    "LAUNCH_TEMPLATES:.LAUNCH_TEMPLATES"
    "VPCS:.VPCS"
    "SUBNETS:.SUBNETS"
    "INTERNET_GATEWAYS:.INTERNET_GATEWAYS"
    "NAT_GATEWAYS:.NAT_GATEWAYS"
    "ROUTE_TABLES:.ROUTE_TABLES"
    "SECURITY_GROUPS:.SECURITY_GROUPS"
    "NETWORK_ACLS:.NETWORK_ACLS"
    "NETWORK_INTERFACES:.NETWORK_INTERFACES"
    "VPC_ENDPOINTS:.VPC_ENDPOINTS"
    "ELASTIC_IPS:.ELASTIC_IPS"
    "EFS_FILE_SYSTEMS:.EFS_FILE_SYSTEMS"
    "EFS_MOUNT_TARGETS:.EFS_MOUNT_TARGETS"
    "RDS_INSTANCES:.RDS_INSTANCES"
    "RDS_CLUSTERS:.RDS_CLUSTERS"
    "EKS_CLUSTERS:.EKS_CLUSTERS"
    "ECR_REPOSITORIES:.ECR_REPOSITORIES"
    "CLOUDFORMATION_STACKS:.CLOUDFORMATION_STACKS"
)

# Process IAM resources separately since they're nested
if jq -e '.GLOBAL_IAM_RESOURCES' "$INPUT_FILE" >/dev/null 2>&1; then
    resource_types+=(
        "IAM_ROLES:.GLOBAL_IAM_RESOURCES.IAM_ROLES"
        "IAM_POLICIES:.GLOBAL_IAM_RESOURCES.IAM_POLICIES" 
        "IAM_INSTANCE_PROFILES:.GLOBAL_IAM_RESOURCES.IAM_INSTANCE_PROFILES"
    )
fi

# Process each resource type
for resource_spec in "${resource_types[@]}"; do
    IFS=':' read -r resource_type json_path <<< "$resource_spec"
    debug_log "About to process resource type: $resource_type with path: $json_path"
    process_resource_type "$resource_type" "$json_path"
    debug_log "Completed processing resource type: $resource_type"
done

debug_log "Finished processing all resource types"

# Check if any resources were selected
selected_count=$(echo "$selected_resources" | jq 'length')
debug_log "Selected $selected_count resources for deletion"

if [[ "$selected_count" == "0" ]]; then
    echo "No resources selected for deletion."
    echo "Exiting without creating deletion file."
    exit 0
fi

# Write selected resources to output file
echo "Writing $selected_count selected resources to: $OUTPUT_FILE"

# Create output JSON with metadata
output_json=$(jq -n \
    --arg source_file "$INPUT_FILE" \
    --arg region "$REGION" \
    --arg timestamp "$(date -u '+%Y-%m-%d %H:%M:%S UTC')" \
    --argjson resources "$selected_resources" \
    '{
        metadata: {
            source_file: $source_file,
            region: $region,
            timestamp: $timestamp,
            total_selected: ($resources | length)
        },
        selected_resources: $resources
    }')

echo "$output_json" > "$OUTPUT_FILE"

echo ""
echo "=== Summary ==="
echo "Source file: $INPUT_FILE"
echo "Resources selected for deletion: $selected_count"
echo "Output file: $OUTPUT_FILE"
echo ""
echo "Next steps:"
echo "1. Review the deletion list: jq . '$OUTPUT_FILE'"
echo ""

# Prompt user to review the deletion manifest or auto-execute if --skip-checks
echo "Please review the deletion manifest above or run: jq . '$OUTPUT_FILE'"
echo ""

if [[ "$SKIP_CHECKS" == "true" ]]; then
    echo "Auto-executing deletion (--skip-checks flag enabled)"
    echo ""
    echo "=== Executing Resource Deletions ==="
    execute_resource_deletions "$OUTPUT_FILE"
else
    read -p "Do you want to execute the deletion of these $selected_count resources now? (y/N): " execute_deletions
    
    if [[ "$execute_deletions" =~ ^[Yy]$ ]]; then
        echo ""
        echo "=== Executing Resource Deletions ==="
        execute_resource_deletions "$OUTPUT_FILE"
    else
        echo ""
        echo "Deletion execution skipped. You can execute deletions later using the manifest file."
    fi
fi

echo ""
echo "=== Resource Selection Complete ==="
debug_log "Script completed successfully"