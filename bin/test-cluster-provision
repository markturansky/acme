#!/bin/bash
# Test Cluster Provisioning Monitor Tool
# Monitors cluster provisioning with timeouts and detailed logging

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
CLUSTER_NAME=""
TIMEOUT=3600  # 60 minutes default
APPLY_CONFIG=true
MONITOR_ONLY=false
VERBOSE=false
LOG_FILE=""

log_info() { echo -e "${BLUE}[INFO]${NC} $*"; }
log_success() { echo -e "${GREEN}[SUCCESS]${NC} $*"; }
log_warn() { echo -e "${YELLOW}[WARN]${NC} $*"; }
log_error() { echo -e "${RED}[ERROR]${NC} $*"; }

# Log with timestamp
log_with_time() {
    local level="$1"
    shift
    local message="$*"
    local timestamp=$(date '+%H:%M:%S')
    echo -e "[$timestamp] $level $message"
    
    if [[ -n "$LOG_FILE" ]]; then
        echo "[$timestamp] $level $message" >> "$LOG_FILE"
    fi
}

log_info_time() { log_with_time "${BLUE}[INFO]${NC}" "$@"; }
log_success_time() { log_with_time "${GREEN}[SUCCESS]${NC}" "$@"; }
log_warn_time() { log_with_time "${YELLOW}[WARN]${NC}" "$@"; }
log_error_time() { log_with_time "${RED}[ERROR]${NC}" "$@"; }

# Check if cluster configuration exists
check_cluster_exists() {
    local cluster_name="$1"
    
    if [[ ! -d "$ROOT_DIR/clusters/$cluster_name" ]]; then
        log_error "Cluster configuration not found: $ROOT_DIR/clusters/$cluster_name"
        log_info "Run: ./bin/test-cluster-create --type ocp"
        return 1
    fi
    
    if [[ ! -f "$ROOT_DIR/clusters/$cluster_name/kustomization.yaml" ]]; then
        log_error "Invalid cluster configuration: missing kustomization.yaml"
        return 1
    fi
    
    log_success "Cluster configuration found: $cluster_name"
    return 0
}

# Detect cluster type
detect_cluster_type() {
    local cluster_name="$1"
    
    # Check for OCP (Hive ClusterDeployment)
    if oc kustomize "$ROOT_DIR/clusters/$cluster_name/" 2>/dev/null | grep -q "kind: ClusterDeployment"; then
        echo "ocp"
    # Check for EKS (CAPI Cluster)
    elif oc kustomize "$ROOT_DIR/clusters/$cluster_name/" 2>/dev/null | grep -q "kind: Cluster" && \
         oc kustomize "$ROOT_DIR/clusters/$cluster_name/" 2>/dev/null | grep -q "cluster.x-k8s.io"; then
        echo "eks"
    # Check for HCP (HostedCluster)
    elif oc kustomize "$ROOT_DIR/clusters/$cluster_name/" 2>/dev/null | grep -q "kind: HostedCluster"; then
        echo "hcp"
    else
        echo "unknown"
    fi
}

# Apply cluster configuration
apply_cluster_config() {
    local cluster_name="$1"
    
    log_info_time "Applying cluster configuration..."
    
    if ! oc apply -k "$ROOT_DIR/clusters/$cluster_name/"; then
        log_error_time "Failed to apply cluster configuration"
        return 1
    fi
    
    log_success_time "Cluster configuration applied successfully"
    
    # Wait for namespace to be ready
    log_info_time "Waiting for namespace to be ready..."
    local timeout=120
    local elapsed=0
    
    while [[ $elapsed -lt $timeout ]]; do
        if oc get namespace "$cluster_name" &>/dev/null; then
            log_success_time "Namespace ready: $cluster_name"
            break
        fi
        sleep 5
        elapsed=$((elapsed + 5))
    done
    
    if [[ $elapsed -ge $timeout ]]; then
        log_error_time "Timeout waiting for namespace creation"
        return 1
    fi
    
    return 0
}

# Wait for secrets to be ready
wait_for_secrets() {
    local cluster_name="$1"
    
    log_info_time "Waiting for ExternalSecrets to sync..."
    
    local timeout=300  # 5 minutes
    local elapsed=0
    local last_status=""
    
    while [[ $elapsed -lt $timeout ]]; do
        local external_secrets=$(oc get externalsecrets -n "$cluster_name" --no-headers 2>/dev/null || true)
        
        if [[ -z "$external_secrets" ]]; then
            log_info_time "No ExternalSecrets found yet..."
            sleep 10
            elapsed=$((elapsed + 10))
            continue
        fi
        
        local total_secrets=$(echo "$external_secrets" | wc -l)
        local ready_secrets=$(echo "$external_secrets" | grep -c "True" || echo "0")
        local current_status="$ready_secrets/$total_secrets"
        
        if [[ "$current_status" != "$last_status" ]]; then
            log_info_time "ExternalSecrets status: $current_status ready"
            last_status="$current_status"
        fi
        
        if [[ "$ready_secrets" -ge "$total_secrets" && "$total_secrets" -gt 0 ]]; then
            log_success_time "All ExternalSecrets ready: $ready_secrets/$total_secrets"
            return 0
        fi
        
        sleep 10
        elapsed=$((elapsed + 10))
    done
    
    log_error_time "Timeout waiting for ExternalSecrets to sync"
    if [[ "$VERBOSE" == "true" ]]; then
        oc get externalsecrets -n "$cluster_name" || true
    fi
    return 1
}

# Monitor OCP cluster provisioning (Hive)
monitor_ocp_provisioning() {
    local cluster_name="$1"
    local timeout="$2"
    
    log_info_time "Monitoring OCP cluster provisioning via Hive..."
    log_info_time "Timeout: ${timeout}s ($((timeout / 60)) minutes)"
    
    local elapsed=0
    local last_status=""
    local provision_started=false
    
    while [[ $elapsed -lt $timeout ]]; do
        # Check if ClusterDeployment exists
        if ! oc get clusterdeployment "$cluster_name" -n "$cluster_name" &>/dev/null; then
            log_info_time "Waiting for ClusterDeployment to be created..."
            sleep 30
            elapsed=$((elapsed + 30))
            continue
        fi
        
        # Get ClusterDeployment status
        local cd_ready=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="ClusterReadyCondition")].status}' 2>/dev/null || echo "Unknown")
        local cd_provisioned=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="ProvisionedCondition")].status}' 2>/dev/null || echo "Unknown")
        local cd_failed=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="ProvisionFailedCondition")].status}' 2>/dev/null || echo "False")
        
        # Check for provision failure
        if [[ "$cd_failed" == "True" ]]; then
            local failure_reason=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" \
                -o jsonpath='{.status.conditions[?(@.type=="ProvisionFailedCondition")].message}' 2>/dev/null || echo "Unknown")
            log_error_time "Cluster provisioning failed: $failure_reason"
            
            # Capture provision job logs
            capture_provision_logs "$cluster_name"
            return 1
        fi
        
        # Check if cluster is ready
        if [[ "$cd_ready" == "True" ]]; then
            log_success_time "OCP cluster provisioned successfully!"
            return 0
        fi
        
        # Check if provisioning has started
        if [[ "$cd_provisioned" == "True" && "$provision_started" == "false" ]]; then
            log_info_time "Cluster provisioning completed, waiting for readiness..."
            provision_started=true
        fi
        
        # Log status updates
        local current_status="Ready:$cd_ready Provisioned:$cd_provisioned"
        if [[ "$current_status" != "$last_status" ]]; then
            log_info_time "ClusterDeployment status: $current_status (elapsed: ${elapsed}s)"
            last_status="$current_status"
            
            # Show provision job status if verbose
            if [[ "$VERBOSE" == "true" ]]; then
                show_provision_job_status "$cluster_name"
            fi
        fi
        
        sleep 30
        elapsed=$((elapsed + 30))
    done
    
    log_error_time "Timeout waiting for cluster provisioning after ${timeout}s"
    capture_provision_logs "$cluster_name"
    return 1
}

# Monitor EKS cluster provisioning (CAPI)
monitor_eks_provisioning() {
    local cluster_name="$1"
    local timeout="$2"
    
    log_info_time "Monitoring EKS cluster provisioning via CAPI..."
    log_info_time "Timeout: ${timeout}s ($((timeout / 60)) minutes)"
    
    local elapsed=0
    local last_status=""
    
    while [[ $elapsed -lt $timeout ]]; do
        # Check if CAPI Cluster exists
        if ! oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" &>/dev/null; then
            log_info_time "Waiting for CAPI Cluster to be created..."
            sleep 30
            elapsed=$((elapsed + 30))
            continue
        fi
        
        # Get CAPI Cluster status
        local cluster_ready=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "Unknown")
        local control_plane_ready=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="ControlPlaneReady")].status}' 2>/dev/null || echo "Unknown")
        local infrastructure_ready=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="InfrastructureReady")].status}' 2>/dev/null || echo "Unknown")
        
        # Check if cluster is ready
        if [[ "$cluster_ready" == "True" ]]; then
            log_success_time "EKS cluster provisioned successfully!"
            return 0
        fi
        
        # Log status updates
        local current_status="Cluster:$cluster_ready ControlPlane:$control_plane_ready Infra:$infrastructure_ready"
        if [[ "$current_status" != "$last_status" ]]; then
            log_info_time "CAPI Cluster status: $current_status (elapsed: ${elapsed}s)"
            last_status="$current_status"
        fi
        
        sleep 30
        elapsed=$((elapsed + 30))
    done
    
    log_error_time "Timeout waiting for EKS cluster provisioning after ${timeout}s"
    return 1
}

# Monitor HCP cluster provisioning
monitor_hcp_provisioning() {
    local cluster_name="$1"
    local timeout="$2"
    
    log_info_time "Monitoring HCP cluster provisioning via HyperShift..."
    log_info_time "Timeout: ${timeout}s ($((timeout / 60)) minutes)"
    
    local elapsed=0
    local last_status=""
    
    while [[ $elapsed -lt $timeout ]]; do
        # Check if HostedCluster exists
        if ! oc get hostedcluster "$cluster_name" -n "$cluster_name" &>/dev/null; then
            log_info_time "Waiting for HostedCluster to be created..."
            sleep 30
            elapsed=$((elapsed + 30))
            continue
        fi
        
        # Get HostedCluster status
        local hc_available=$(oc get hostedcluster "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "Unknown")
        local hc_progressing=$(oc get hostedcluster "$cluster_name" -n "$cluster_name" \
            -o jsonpath='{.status.conditions[?(@.type=="Progressing")].status}' 2>/dev/null || echo "Unknown")
        
        # Check if cluster is available
        if [[ "$hc_available" == "True" ]]; then
            log_success_time "HCP cluster provisioned successfully!"
            return 0
        fi
        
        # Log status updates
        local current_status="Available:$hc_available Progressing:$hc_progressing"
        if [[ "$current_status" != "$last_status" ]]; then
            log_info_time "HostedCluster status: $current_status (elapsed: ${elapsed}s)"
            last_status="$current_status"
        fi
        
        sleep 30
        elapsed=$((elapsed + 30))
    done
    
    log_error_time "Timeout waiting for HCP cluster provisioning after ${timeout}s"
    return 1
}

# Show provision job status
show_provision_job_status() {
    local cluster_name="$1"
    
    local provision_jobs=$(oc get jobs -n "$cluster_name" --no-headers 2>/dev/null | grep -E "(provision|install)" || true)
    if [[ -n "$provision_jobs" ]]; then
        log_info_time "Provision job status:"
        echo "$provision_jobs" | while read job rest; do
            echo "    $job: $rest"
        done
    fi
}

# Capture provision job logs for debugging
capture_provision_logs() {
    local cluster_name="$1"
    
    log_info_time "Capturing provision job logs for debugging..."
    
    local provision_jobs=$(oc get jobs -n "$cluster_name" -o name 2>/dev/null | grep -E "(provision|install)" || true)
    if [[ -n "$provision_jobs" ]]; then
        echo "$provision_jobs" | while read job; do
            local job_name=$(echo "$job" | cut -d'/' -f2)
            log_info_time "Logs from $job_name:"
            oc logs -n "$cluster_name" "$job" --tail=50 2>/dev/null || log_warn_time "Could not retrieve logs from $job_name"
            echo "---"
        done
    else
        log_warn_time "No provision jobs found"
    fi
}

# Get cluster status summary
get_cluster_status() {
    local cluster_name="$1"
    local cluster_type="$2"
    
    echo "Cluster Status Summary:"
    echo "======================="
    echo "Name: $cluster_name"
    echo "Type: $cluster_type"
    echo "Namespace: $(oc get namespace "$cluster_name" -o jsonpath='{.metadata.name}' 2>/dev/null || echo "NOT FOUND")"
    
    case "$cluster_type" in
        ocp)
            local cd_status=$(oc get clusterdeployment "$cluster_name" -n "$cluster_name" \
                -o jsonpath='{.status.conditions[?(@.type=="ClusterReadyCondition")].status}' 2>/dev/null || echo "NOT FOUND")
            echo "ClusterDeployment Ready: $cd_status"
            ;;
        eks)
            local cluster_status=$(oc get cluster.cluster.x-k8s.io "$cluster_name" -n "$cluster_name" \
                -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "NOT FOUND")
            echo "CAPI Cluster Ready: $cluster_status"
            ;;
        hcp)
            local hc_status=$(oc get hostedcluster "$cluster_name" -n "$cluster_name" \
                -o jsonpath='{.status.conditions[?(@.type=="Available")].status}' 2>/dev/null || echo "NOT FOUND")
            echo "HostedCluster Available: $hc_status"
            ;;
    esac
    
    # Check ExternalSecrets
    local external_secrets=$(oc get externalsecrets -n "$cluster_name" --no-headers 2>/dev/null || true)
    if [[ -n "$external_secrets" ]]; then
        local total_secrets=$(echo "$external_secrets" | wc -l)
        local ready_secrets=$(echo "$external_secrets" | grep -c "True" || echo "0")
        echo "ExternalSecrets: $ready_secrets/$total_secrets ready"
    else
        echo "ExternalSecrets: None found"
    fi
}

# Usage
usage() {
    cat << EOF
Test Cluster Provisioning Monitor Tool

Usage: $0 --cluster CLUSTER_NAME [OPTIONS]

Required:
  --cluster NAME           Name of the test cluster to provision

Options:
  --timeout SECONDS        Provisioning timeout in seconds (default: 3600)
  --no-apply              Skip applying configuration (monitor only)
  --monitor-only          Same as --no-apply
  --verbose               Show detailed provisioning information
  --log-file FILE         Write logs to file
  --status                Show current cluster status and exit
  --help                  Show this help message

Examples:
  $0 --cluster test-ocp-1234                    Provision and monitor cluster
  $0 --cluster test-ocp-1234 --timeout 7200     Monitor with 2-hour timeout
  $0 --cluster test-ocp-1234 --monitor-only     Monitor existing provisioning
  $0 --cluster test-ocp-1234 --status           Check current status

EOF
}

# Parse arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --cluster)
            CLUSTER_NAME="$2"
            shift 2
            ;;
        --timeout)
            TIMEOUT="$2"
            shift 2
            ;;
        --no-apply|--monitor-only)
            APPLY_CONFIG=false
            MONITOR_ONLY=true
            shift
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --log-file)
            LOG_FILE="$2"
            shift 2
            ;;
        --status)
            if [[ -z "$CLUSTER_NAME" ]]; then
                log_error "Cluster name required for status check"
                exit 1
            fi
            cluster_type=$(detect_cluster_type "$CLUSTER_NAME")
            get_cluster_status "$CLUSTER_NAME" "$cluster_type"
            exit 0
            ;;
        --help)
            usage
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            usage
            exit 1
            ;;
    esac
done

# Validate required arguments
if [[ -z "$CLUSTER_NAME" ]]; then
    log_error "Cluster name is required"
    usage
    exit 1
fi

# Main execution
main() {
    log_info "Test Cluster Provisioning Monitor"
    echo "================================="
    echo "Cluster: $CLUSTER_NAME"
    echo "Timeout: ${TIMEOUT}s ($((TIMEOUT / 60)) minutes)"
    echo "Apply Config: $APPLY_CONFIG"
    echo "Verbose: $VERBOSE"
    if [[ -n "$LOG_FILE" ]]; then
        echo "Log File: $LOG_FILE"
        mkdir -p "$(dirname "$LOG_FILE")"
    fi
    echo
    
    # Check if cluster configuration exists
    if ! check_cluster_exists "$CLUSTER_NAME"; then
        exit 1
    fi
    
    # Detect cluster type
    local cluster_type=$(detect_cluster_type "$CLUSTER_NAME")
    log_info "Detected cluster type: $cluster_type"
    
    # Apply configuration if requested
    if [[ "$APPLY_CONFIG" == "true" ]]; then
        if ! apply_cluster_config "$CLUSTER_NAME"; then
            exit 1
        fi
        
        # Wait for secrets
        if ! wait_for_secrets "$CLUSTER_NAME"; then
            exit 1
        fi
    else
        log_info_time "Skipping configuration application (monitor-only mode)"
    fi
    
    # Monitor provisioning based on cluster type
    local start_time=$(date +%s)
    local success=false
    
    case "$cluster_type" in
        ocp)
            if monitor_ocp_provisioning "$CLUSTER_NAME" "$TIMEOUT"; then
                success=true
            fi
            ;;
        eks)
            if monitor_eks_provisioning "$CLUSTER_NAME" "$TIMEOUT"; then
                success=true
            fi
            ;;
        hcp)
            if monitor_hcp_provisioning "$CLUSTER_NAME" "$TIMEOUT"; then
                success=true
            fi
            ;;
        *)
            log_error "Unknown cluster type: $cluster_type"
            exit 1
            ;;
    esac
    
    local end_time=$(date +%s)
    local duration=$((end_time - start_time))
    
    echo
    if [[ "$success" == "true" ]]; then
        log_success "🎉 Cluster provisioning completed successfully!"
        log_success "Provisioning time: ${duration}s ($((duration / 60))m $((duration % 60))s)"
        echo
        get_cluster_status "$CLUSTER_NAME" "$cluster_type"
        echo
        echo "Next steps:"
        echo "1. Validate cluster: ./bin/test-cluster-validate --cluster $CLUSTER_NAME"
        echo "2. Test ACM integration: ./bin/test-acm-integration --cluster $CLUSTER_NAME"
        echo "3. Test GitOps sync: ./bin/test-gitops-sync --cluster $CLUSTER_NAME"
        exit 0
    else
        log_error "❌ Cluster provisioning failed"
        log_error "Duration: ${duration}s ($((duration / 60))m $((duration % 60))s)"
        echo
        get_cluster_status "$CLUSTER_NAME" "$cluster_type"
        exit 1
    fi
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi