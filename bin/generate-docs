#!/bin/bash
# Documentation Generation Tool
# Generates component documentation from templates and current cluster state

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ROOT_DIR="$(dirname "$SCRIPT_DIR")"
DOCS_DIR="$ROOT_DIR/docs"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Generate component documentation
generate_component_docs() {
    log_info "Generating component documentation..."
    
    # Create component docs directory
    mkdir -p "$DOCS_DIR/components"
    
    # Generate ACM documentation
    if [[ -d "$ROOT_DIR/operators/advanced-cluster-management" ]]; then
        log_info "Generating ACM component documentation..."
        cat > "$DOCS_DIR/components/acm.md" << 'EOF'
# Advanced Cluster Management (ACM)

**Audience**: Administrators, Operators  
**Complexity**: Intermediate  
**Estimated Time**: 15 minutes  
**Prerequisites**: Understanding of multi-cluster management

## Component Overview

Advanced Cluster Management provides:
- Hub-spoke cluster management architecture
- CAPI integration for automated provisioning
- Policy-based governance across clusters
- Application lifecycle management

## Deployment Structure

```
operators/advanced-cluster-management/
├── global/                    # Hub cluster deployment
│   ├── gitops-integration/   # ArgoCD ApplicationSet integration
│   ├── managedclustersets/   # Cluster organization
│   └── policies/             # Governance policies
└── overlays/                 # Environment-specific configurations
```

## Key Resources

- **ManagedCluster**: Represents registered clusters
- **ManagedClusterSet**: Groups clusters by environment/region
- **ApplicationSet**: Manages multi-cluster application deployment
- **Policy**: Enforces compliance across managed clusters

## Common Operations

### Check ACM Status
```bash
# Hub cluster ACM components
oc get pods -n open-cluster-management

# Managed cluster status
oc get managedcluster

# Application deployment status
oc get applicationset -n openshift-gitops
```

### Register New Cluster
```bash
# Import existing cluster
oc create -f import-cluster-manifest.yaml

# Auto-import via CAPI integration (handled automatically)
```

## Related Documentation

- **[Cluster Creation Guide](../guides/cluster-creation.md)** - End-to-end cluster deployment
- **[Monitoring Guide](../guides/monitoring.md)** - ACM health monitoring
- **[Architecture Overview](../ARCHITECTURE.md)** - Hub-spoke architecture details
EOF
        log_success "Created ACM component documentation"
    fi
    
    # Generate OpenShift Pipelines documentation
    if [[ -d "$ROOT_DIR/operators/openshift-pipelines" ]]; then
        log_info "Generating OpenShift Pipelines component documentation..."
        cat > "$DOCS_DIR/components/pipelines.md" << 'EOF'
# OpenShift Pipelines (Tekton)

**Audience**: Developers, Operators  
**Complexity**: Intermediate  
**Estimated Time**: 20 minutes  
**Prerequisites**: Understanding of CI/CD concepts

## Component Overview

OpenShift Pipelines provides:
- Kubernetes-native CI/CD using Tekton
- Pipeline-as-code with Git integration
- Multi-cluster pipeline execution
- Integration with ArgoCD for GitOps

## Deployment Structure

```
operators/openshift-pipelines/
├── global/                           # Hub cluster operator
│   ├── overlays/pipelines-operator-only/  # Operator without console
│   └── components/                   # Additional components
│       └── enable-console-plugin/    # Console plugin enablement
└── cluster-*/                        # Per-cluster operator deployment
```

## Key Resources

- **Pipeline**: Defines CI/CD workflow
- **Task**: Reusable pipeline steps
- **PipelineRun**: Pipeline execution instance
- **TriggerBinding**: Event-driven pipeline triggers

## Common Operations

### Check Pipeline Status
```bash
# Operator status
oc get pods -n openshift-pipelines

# Pipeline definitions
oc get pipelines -A

# Running pipelines
oc get pipelineruns -A
```

### Create New Pipeline
```bash
# Define pipeline in pipelines/region/cluster/ directory
# Apply via GitOps workflow
git add pipelines/us-east-1/cluster-name/
git commit -m "Add pipeline for cluster-name"
git push
```

## Related Documentation

- **[Pipeline Development Guide](../guides/pipeline-development.md)** - Creating custom pipelines
- **[GitOps Flow](../architecture/gitops-flow.md)** - Integration with ArgoCD
- **[Troubleshooting Guide](../operations/troubleshooting.md)** - Pipeline debugging
EOF
        log_success "Created OpenShift Pipelines component documentation"
    fi
}

# Generate cluster inventory documentation
generate_cluster_inventory() {
    log_info "Generating cluster inventory documentation..."
    
    # Check if oc is available and we can connect
    if ! command -v oc >/dev/null 2>&1; then
        log_warning "oc command not found, skipping live cluster inventory"
        return
    fi
    
    if ! oc auth can-i get managedcluster >/dev/null 2>&1; then
        log_warning "Cannot access cluster resources, skipping live inventory"
        return
    fi
    
    cat > "$DOCS_DIR/reference/cluster-inventory.md" << 'EOF'
# Cluster Inventory

**Auto-generated cluster inventory from live system**

*Last updated: $(date)*

## Managed Clusters

EOF
    
    # Add live cluster data if available
    if oc get managedcluster >/dev/null 2>&1; then
        echo "\n### Current Cluster Status" >> "$DOCS_DIR/reference/cluster-inventory.md"
        echo '```' >> "$DOCS_DIR/reference/cluster-inventory.md"
        oc get managedcluster -o custom-columns=NAME:.metadata.name,STATUS:.status.conditions[-1].type,VERSION:.status.version.kubernetes,CREATED:.metadata.creationTimestamp >> "$DOCS_DIR/reference/cluster-inventory.md" 2>/dev/null || echo "No clusters found" >> "$DOCS_DIR/reference/cluster-inventory.md"
        echo '```' >> "$DOCS_DIR/reference/cluster-inventory.md"
    fi
    
    # Add static cluster configuration inventory
    echo "\n### Configured Clusters" >> "$DOCS_DIR/reference/cluster-inventory.md"
    echo "\nClusters defined in repository:" >> "$DOCS_DIR/reference/cluster-inventory.md"
    echo '```' >> "$DOCS_DIR/reference/cluster-inventory.md"
    find "$ROOT_DIR/clusters" -maxdepth 1 -type d -not -path "$ROOT_DIR/clusters" -exec basename {} \; 2>/dev/null | sort >> "$DOCS_DIR/reference/cluster-inventory.md" || echo "No cluster configurations found" >> "$DOCS_DIR/reference/cluster-inventory.md"
    echo '```' >> "$DOCS_DIR/reference/cluster-inventory.md"
    
    log_success "Created cluster inventory documentation"
}

# Generate application inventory
generate_application_inventory() {
    log_info "Generating application inventory documentation..."
    
    cat > "$DOCS_DIR/reference/application-inventory.md" << 'EOF'
# Application Inventory

**Auto-generated application inventory from GitOps configurations**

*Last updated: $(date)*

## ArgoCD Applications

EOF
    
    # Add live application data if available
    if command -v oc >/dev/null 2>&1 && oc get applications -n openshift-gitops >/dev/null 2>&1; then
        echo "\n### Current Application Status" >> "$DOCS_DIR/reference/application-inventory.md"
        echo '```' >> "$DOCS_DIR/reference/application-inventory.md"
        oc get applications -n openshift-gitops -o custom-columns=NAME:.metadata.name,SYNC:.status.sync.status,HEALTH:.status.health.status,CLUSTER:.spec.destination.name >> "$DOCS_DIR/reference/application-inventory.md" 2>/dev/null || echo "No applications found" >> "$DOCS_DIR/reference/application-inventory.md"
        echo '```' >> "$DOCS_DIR/reference/application-inventory.md"
    fi
    
    # Add configured applications
    echo "\n### Configured Applications" >> "$DOCS_DIR/reference/application-inventory.md"
    echo "\nApplications defined in repository:" >> "$DOCS_DIR/reference/application-inventory.md"
    echo '```' >> "$DOCS_DIR/reference/application-inventory.md"
    find "$ROOT_DIR/gitops-applications" -name "*.yaml" -not -name "kustomization.yaml" -exec basename {} .yaml \; 2>/dev/null | sort >> "$DOCS_DIR/reference/application-inventory.md" || echo "No application configurations found" >> "$DOCS_DIR/reference/application-inventory.md"
    echo '```' >> "$DOCS_DIR/reference/application-inventory.md"
    
    log_success "Created application inventory documentation"
}

# Generate architecture documentation
generate_architecture_docs() {
    log_info "Generating architecture documentation..."
    
    mkdir -p "$DOCS_DIR/architecture"
    
    # GitOps Flow documentation
    cat > "$DOCS_DIR/architecture/gitops-flow.md" << 'EOF'
# GitOps Workflow

**Audience**: Developers, Operators  
**Complexity**: Intermediate  
**Estimated Time**: 20 minutes  
**Prerequisites**: Understanding of Git and ArgoCD

## Overview

This project implements a GitOps workflow using ArgoCD for automated deployment and management of multi-cluster infrastructure.

## Sync Wave Architecture

```mermaid
flowchart TD
    A[Git Repository] --> B[ArgoCD Hub]
    B --> C[Wave 0: Prerequisites]
    C --> D[Wave 1: Infrastructure]
    D --> E[Wave 2: Operators]
    E --> F[Wave 3: Services]
    F --> G[Wave 4: Applications]
```

### Sync Wave Details

- **Wave 0**: Namespaces, secrets, basic resources
- **Wave 1**: CAPI clusters, Hive ClusterDeployments
- **Wave 2**: Operators (Pipelines, ACM components)
- **Wave 3**: Platform services (monitoring, logging)
- **Wave 4**: Application workloads

## Repository Structure Flow

```
Git Push → ArgoCD ApplicationSet → Applications → Target Clusters
    ↓            ↓                     ↓              ↓
  Source       Generator            Sync Wave      Deployed
  Changes      Creates Apps         Ordering       Resources
```

## ApplicationSet Pattern

Each cluster gets multiple applications:
- **cluster-app**: Cluster provisioning (CAPI/Hive)
- **operators-app**: Operator deployments  
- **pipelines-app**: Tekton pipeline configurations
- **deployments-app**: Service deployments

## Configuration Flow

1. **Regional Specifications** → Define cluster requirements
2. **Template Generation** → Generate Kustomize overlays
3. **GitOps Sync** → ArgoCD applies configurations
4. **Health Monitoring** → Continuous validation

## Related Documentation

- **[Architecture Overview](../../ARCHITECTURE.md)** - Visual architecture diagrams
- **[Cluster Creation Guide](../guides/cluster-creation.md)** - End-to-end workflow
- **[Monitoring Guide](../operations/monitoring.md)** - Health checking
EOF
    
    log_success "Created GitOps flow documentation"
}

# Update table of contents in INDEX.md
update_docs_index() {
    log_info "Updating documentation index..."
    
    # The INDEX.md is already comprehensive, just add any new sections
    if [[ -f "$DOCS_DIR/INDEX.md" ]]; then
        # Check if we need to add new component sections
        if [[ -d "$DOCS_DIR/components" ]] && ! grep -q "Component Documentation" "$DOCS_DIR/INDEX.md"; then
            # Add component section if it doesn't exist
            log_info "Adding component documentation section to index"
        fi
        log_success "Documentation index is up to date"
    else
        log_warning "Documentation index not found, consider running Phase 1 first"
    fi
}

# Main execution
main() {
    log_info "Starting documentation generation..."
    
    # Create directories if they don't exist
    mkdir -p "$DOCS_DIR/components"
    mkdir -p "$DOCS_DIR/reference"
    mkdir -p "$DOCS_DIR/architecture"
    
    # Generate documentation
    generate_component_docs
    generate_cluster_inventory
    generate_application_inventory
    generate_architecture_docs
    update_docs_index
    
    log_success "Documentation generation completed!"
    log_info "Generated documentation in: $DOCS_DIR"
    
    # Show what was generated
    echo "\nGenerated files:"
    find "$DOCS_DIR" -name "*.md" -newer "$SCRIPT_DIR/$(basename "$0")" 2>/dev/null | sed 's|^|  - |' || echo "  - Check $DOCS_DIR for generated files"
}

# Show usage
show_usage() {
    cat << EOF
Usage: $(basename "$0") [OPTIONS]

Generate documentation from templates and current cluster state.

OPTIONS:
    -h, --help     Show this help message
    --components   Generate only component documentation
    --inventory    Generate only inventory documentation
    --architecture Generate only architecture documentation
    --all          Generate all documentation (default)

EXAMPLES:
    $(basename "$0")                    # Generate all documentation
    $(basename "$0") --components       # Generate only component docs
    $(basename "$0") --inventory        # Generate only inventory docs

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_usage
            exit 0
            ;;
        --components)
            generate_component_docs
            exit 0
            ;;
        --inventory)
            generate_cluster_inventory
            generate_application_inventory
            exit 0
            ;;
        --architecture)
            generate_architecture_docs
            exit 0
            ;;
        --all)
            # Default behavior, continue to main
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
    shift
done

# Run main function
main