#!/bin/bash
set -euo pipefail

# vault-setup-aws-credentials - Store AWS credentials from secrets file into Vault
# This script safely extracts credentials and stores them in Vault

SECRETS_FILE="secrets/aws-credentials.yaml"

log() {
    echo "$(date '+%H:%M:%S') $*"
}

error_log() {
    echo "$(date '+%H:%M:%S') ❌ ERROR: $*" >&2
}

success_log() {
    echo "$(date '+%H:%M:%S') ✅ $*"
}

warning_log() {
    echo "$(date '+%H:%M:%S') ⚠️  $*"
}

# Check prerequisites
check_prerequisites() {
    log "Checking prerequisites..."
    
    if [[ ! -f "$SECRETS_FILE" ]]; then
        error_log "Secrets file not found: $SECRETS_FILE"
        exit 1
    fi
    
    if ! command -v oc >/dev/null 2>&1; then
        error_log "OpenShift CLI (oc) not found"
        exit 1
    fi
    
    if ! oc whoami >/dev/null 2>&1; then
        error_log "Not connected to OpenShift cluster"
        exit 1
    fi
    
    # Check if Vault pod is running
    if ! oc get pod vault-0 -n vault >/dev/null 2>&1; then
        error_log "Vault pod not found in vault namespace"
        exit 1
    fi
    
    # Check if Vault is ready
    if ! oc exec vault-0 -n vault -- vault status >/dev/null 2>&1; then
        error_log "Vault is not ready or unsealed"
        log "   You may need to unseal Vault first"
        exit 1
    fi
    
    success_log "Prerequisites validated"
}

# Setup Kubernetes authentication if not already configured
setup_kubernetes_auth() {
    log "Setting up Kubernetes authentication..."
    
    # Check if kubernetes auth is already enabled
    if oc exec vault-0 -n vault -- vault auth list | grep -q "kubernetes/"; then
        log "   Kubernetes auth already enabled"
    else
        log "   Enabling Kubernetes auth method..."
        if ! oc exec vault-0 -n vault -- vault auth enable kubernetes; then
            error_log "Failed to enable Kubernetes auth"
            exit 1
        fi
        success_log "   Kubernetes auth method enabled"
    fi
    
    # Configure Kubernetes auth
    log "   Configuring Kubernetes auth..."
    
    # Get the service account token
    local token_secret
    token_secret=$(oc get serviceaccount vault-secret-reader -n vault -o jsonpath='{.secrets[0].name}' 2>/dev/null || echo "")
    
    if [[ -z "$token_secret" ]]; then
        warning_log "   Service account token not found, creating token..."
        # Create a token manually (for newer Kubernetes versions)
        oc create token vault-secret-reader -n vault --duration=8760h > /tmp/vault-token || {
            error_log "Failed to create service account token"
            exit 1
        }
        local sa_token=$(cat /tmp/vault-token)
        rm -f /tmp/vault-token
    else
        local sa_token
        sa_token=$(oc get secret "$token_secret" -n vault -o jsonpath='{.data.token}' | base64 -d)
    fi
    
    local k8s_host
    k8s_host=$(oc config view --minify -o jsonpath='{.clusters[0].cluster.server}')
    
    local k8s_ca_cert
    if [[ -n "$token_secret" ]]; then
        k8s_ca_cert=$(oc get secret "$token_secret" -n vault -o jsonpath='{.data.ca\.crt}' | base64 -d)
    else
        # Get CA cert from cluster info
        k8s_ca_cert=$(oc get configmap kube-root-ca.crt -n vault -o jsonpath='{.data.ca\.crt}' 2>/dev/null || echo "")
    fi
    
    if oc exec vault-0 -n vault -- vault write auth/kubernetes/config \
        token_reviewer_jwt="$sa_token" \
        kubernetes_host="$k8s_host" \
        kubernetes_ca_cert="$k8s_ca_cert"; then
        success_log "   Kubernetes auth configured"
    else
        error_log "Failed to configure Kubernetes auth"
        exit 1
    fi
}

# Setup policies and role
setup_policies_and_role() {
    log "Setting up Vault policies and role..."
    
    # Create policy for cluster secrets
    log "   Creating cluster-secrets policy..."
    if cat << 'EOF' | oc exec vault-0 -n vault -i -- vault policy write cluster-secrets -
path "secret/data/aws-credentials" {
  capabilities = ["read"]
}
path "secret/data/pull-secret" {
  capabilities = ["read"]
}
path "secret/data/*" {
  capabilities = ["read"]
}
EOF
    then
        success_log "   Policy created"
    else
        error_log "Failed to create policy"
        exit 1
    fi
    
    # Create Kubernetes role
    log "   Creating Kubernetes role..."
    if oc exec vault-0 -n vault -- vault write auth/kubernetes/role/cluster-role \
        bound_service_account_names=vault-secret-reader \
        bound_service_account_namespaces="*" \
        policies=cluster-secrets \
        ttl=1h; then
        success_log "   Role created"
    else
        error_log "Failed to create role"
        exit 1
    fi
}

# Extract and store AWS credentials
store_aws_credentials() {
    log "Extracting and storing AWS credentials..."
    
    # Extract base64 encoded values from the YAML file
    local aws_access_key_id_b64
    local aws_secret_access_key_b64
    local pull_secret_b64
    
    aws_access_key_id_b64=$(grep "aws_access_key_id:" "$SECRETS_FILE" | cut -d: -f2 | tr -d ' ')
    aws_secret_access_key_b64=$(grep "aws_secret_access_key:" "$SECRETS_FILE" | cut -d: -f2 | tr -d ' ')
    pull_secret_b64=$(grep "pullSecret:" "$SECRETS_FILE" | cut -d: -f2 | tr -d ' ')
    
    if [[ -z "$aws_access_key_id_b64" || -z "$aws_secret_access_key_b64" ]]; then
        error_log "Could not extract AWS credentials from $SECRETS_FILE"
        exit 1
    fi
    
    # Decode base64 values (but don't echo them)
    local aws_access_key_id
    local aws_secret_access_key
    local pull_secret
    
    aws_access_key_id=$(echo "$aws_access_key_id_b64" | base64 -d)
    aws_secret_access_key=$(echo "$aws_secret_access_key_b64" | base64 -d)
    pull_secret=$(echo "$pull_secret_b64" | base64 -d)
    
    # Store AWS credentials in Vault
    log "   Storing AWS credentials in Vault..."
    if oc exec vault-0 -n vault -- vault kv put secret/aws-credentials \
        aws_access_key_id="$aws_access_key_id" \
        aws_secret_access_key="$aws_secret_access_key"; then
        success_log "   AWS credentials stored"
    else
        error_log "Failed to store AWS credentials"
        exit 1
    fi
    
    # Store pull secret in Vault
    if [[ -n "$pull_secret" ]]; then
        log "   Storing pull secret in Vault..."
        if oc exec vault-0 -n vault -- vault kv put secret/pull-secret \
            .dockerconfigjson="$pull_secret"; then
            success_log "   Pull secret stored"
        else
            warning_log "Failed to store pull secret"
        fi
    fi
}

# Test the setup
test_setup() {
    log "Testing Vault setup..."
    
    # Test that we can read the credentials
    log "   Testing AWS credentials retrieval..."
    if oc exec vault-0 -n vault -- vault kv get secret/aws-credentials >/dev/null 2>&1; then
        success_log "   AWS credentials can be retrieved"
    else
        error_log "Cannot retrieve AWS credentials from Vault"
        exit 1
    fi
    
    # Check ClusterSecretStore status
    log "   Checking ClusterSecretStore status..."
    sleep 5  # Give ESO time to reconnect
    
    local store_status
    store_status=$(oc get clustersecretstore vault-cluster-store -o jsonpath='{.status.conditions[0].status}' 2>/dev/null || echo "Unknown")
    
    if [[ "$store_status" == "True" ]]; then
        success_log "   ClusterSecretStore is ready"
    else
        warning_log "   ClusterSecretStore status: $store_status"
        log "   This may take a few minutes to update"
    fi
    
    # Check ExternalSecret status
    log "   Checking ExternalSecret status..."
    local external_secrets
    external_secrets=$(oc get externalsecrets -A -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || echo "")
    
    if [[ -n "$external_secrets" ]]; then
        log "   Found ExternalSecrets: $external_secrets"
        log "   They should sync automatically within 1 hour"
    else
        log "   No ExternalSecrets found"
    fi
}

# Main execution
main() {
    log "🔐 Vault AWS Credentials Setup"
    log "============================="
    
    check_prerequisites
    setup_kubernetes_auth
    setup_policies_and_role
    store_aws_credentials
    test_setup
    
    echo ""
    success_log "✅ Vault setup completed successfully!"
    echo ""
    log "📋 Next steps:"
    log "   1. Check ClusterSecretStore status: oc get clustersecretstore vault-cluster-store"
    log "   2. Check ExternalSecret status: oc get externalsecrets -A"
    log "   3. Verify secret synchronization: oc get secrets -A | grep aws-credentials"
    echo ""
    log "🔍 Troubleshooting:"
    log "   - ESO logs: oc logs -n external-secrets deployment/external-secrets"
    log "   - Vault status: oc exec vault-0 -n vault -- vault status"
    log "   - Test auth: oc exec vault-0 -n vault -- vault auth list"
}

# Run main function
main "$@"