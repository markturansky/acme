#!/bin/bash

# CAPI Live Provisioning Dashboard
# Usage: ./bin/capi-dashboard [--cluster=name] [--interval=seconds]

set -euo pipefail

CLUSTER_FILTER=""
INTERVAL=5

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --cluster=*)
            CLUSTER_FILTER="${1#*=}"
            shift
            ;;
        --interval=*)
            INTERVAL="${1#*=}"
            shift
            ;;
        --help)
            echo "CAPI Live Provisioning Dashboard"
            echo "Usage: $0 [--cluster=name] [--interval=seconds]"
            echo ""
            echo "Options:"
            echo "  --cluster    Filter by specific cluster name"
            echo "  --interval   Refresh interval in seconds (default: 5)"
            echo ""
            echo "Controls:"
            echo "  q or Ctrl+C  Quit"
            echo "  r            Refresh immediately"
            echo ""
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'
BOLD='\033[1m'

# Function to display header
display_header() {
    local current_time=$(date +'%Y-%m-%d %H:%M:%S')
    echo -e "${BOLD}┌─ CAPI Cluster Provisioning Dashboard ────────────────────────────────────┐${NC}"
    echo -e "${BOLD}│ ${current_time}                                                   │${NC}"
    echo -e "${BOLD}│ Press 'q' to quit, 'r' to refresh                                        │${NC}"
    echo -e "${BOLD}└───────────────────────────────────────────────────────────────────────────┘${NC}"
    echo
}

# Function to run the dashboard
run_dashboard() {
    local cmd_args="--format=dashboard"
    if [[ -n "$CLUSTER_FILTER" ]]; then
        cmd_args="$cmd_args --cluster=$CLUSTER_FILTER"
    fi
    
    # Clear screen and run dashboard
    clear
    display_header
    ./bin/capi-status $cmd_args
    
    # Display footer with instructions
    echo
    echo -e "${BLUE}────────────────────────────────────────────────────────────────────────────${NC}"
    echo -e "${BLUE}Next refresh in ${INTERVAL}s | Press 'q' to quit, 'r' to refresh now${NC}"
}

# Function to cleanup on exit
cleanup() {
    # Restore cursor and clear screen
    tput cnorm
    clear
    echo "Dashboard stopped."
    exit 0
}

# Trap signals for cleanup
trap cleanup SIGINT SIGTERM

# Hide cursor for cleaner display
tput civis

# Check if capi-status script exists
if [[ ! -f "./bin/capi-status" ]]; then
    echo "Error: ./bin/capi-status script not found"
    echo "Please ensure you're running this from the bootstrap repository root"
    exit 1
fi

# Make capi-status executable if needed
if [[ ! -x "./bin/capi-status" ]]; then
    chmod +x ./bin/capi-status
fi

echo -e "${GREEN}Starting CAPI Provisioning Dashboard...${NC}"
echo -e "${BLUE}Checking cluster access...${NC}"

# Test cluster connectivity
if ! kubectl cluster-info &>/dev/null; then
    echo -e "${RED}Error: Cannot connect to Kubernetes cluster${NC}"
    echo "Please ensure your kubeconfig is set up correctly"
    exit 1
fi

# Initial display
run_dashboard

# Main loop with input handling
while true; do
    # Wait for interval or user input
    if read -t "$INTERVAL" -n 1 input; then
        case "$input" in
            'q'|'Q')
                cleanup
                ;;
            'r'|'R')
                run_dashboard
                continue
                ;;
            *)
                # Ignore other input
                continue
                ;;
        esac
    fi
    
    # Refresh dashboard
    run_dashboard
done