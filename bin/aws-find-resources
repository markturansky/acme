#!/bin/bash
set -euo pipefail

# Parse command line arguments
DEBUG=${DEBUG:-false}
ALL_REGIONS=false
VERBOSE=false

for arg in "$@"; do
    case $arg in
        --debug)
            DEBUG=true
            set -x
            ;;
        --all-regions)
            ALL_REGIONS=true
            ;;
        --verbose)
            VERBOSE=true
            ;;
        --help)
            echo "Usage: $0 [CLUSTER_ID] [OPTIONS]"
            echo ""
            echo "DISCOVERY STRATEGY:"
            echo "  1. Tag-based discovery (primary) - finds properly tagged resources"
            echo "  2. VPC-scoped discovery (secondary) - finds untagged resources in cluster VPCs only"
            echo "  3. Security group patterns (fallback) - OpenShift-specific patterns"
            echo ""
            echo "OPTIONS:"
            echo "  --debug         Enable debug output with discovery strategy details"
            echo "  --all-regions   Search all supported regions"
            echo "  --verbose       Show discovery progress to stderr (default: JSON output only)"
            echo "  --help          Show this help"
            echo ""
            echo "Examples:"
            echo "  $0 ocp-02                    # Discover resources for ocp-02"
            echo "  $0 eks-02 --all-regions     # Search all regions"
            echo "  $0 ocp-03 --verbose         # Show progress + JSON output"
            exit 0
            ;;
    esac
done

debug_log() {
    if [[ "$DEBUG" == "true" ]]; then
        echo "[DEBUG $(date '+%H:%M:%S')] $*" >&2
    fi
}

debug_log "Script started with args: $*"

# Set defaults for cluster ID and regions
DEFAULT_CLUSTER_ID="ocp-02"
DEFAULT_REGIONS=("us-west-2")
ALL_SUPPORTED_REGIONS=("us-east-1" "us-east-2" "us-west-2" "eu-west-1" "ap-southeast-1")

# Get cluster ID from first non-option argument
CLUSTER_ID=""
for arg in "$@"; do
    if [[ ! "$arg" =~ ^-- ]]; then
        CLUSTER_ID="$arg"
        break
    fi
done

CLUSTER_ID="${CLUSTER_ID:-$DEFAULT_CLUSTER_ID}"

# Set regions based on options
if [[ "$ALL_REGIONS" == "true" ]]; then
    REGIONS=("${ALL_SUPPORTED_REGIONS[@]}")
else
    REGIONS=("${DEFAULT_REGIONS[@]}")
fi

debug_log "Cluster ID: '$CLUSTER_ID'"
debug_log "Regions: ${REGIONS[*]}"

# Only show header in verbose mode
if [[ "$VERBOSE" == "true" ]]; then
    echo "=== AWS Resource Discovery ===" >&2
    echo "This script discovers AWS resources consumed by OpenShift clusters using smart filtering" >&2
    echo "Prevents false positives by scoping instance type discovery to cluster VPCs only" >&2
    echo "" >&2
    echo "Discovering resources for cluster: $CLUSTER_ID" >&2
    echo "Searching regions: ${REGIONS[*]}" >&2
    echo "" >&2
fi

# Main discovery loop - only process one region for now (simplicity)
REGION="${REGIONS[0]}"

if [[ "$VERBOSE" == "true" ]]; then
    echo "Starting resource discovery..." >&2
    echo "" >&2
    echo "===== Region: $REGION =====" >&2
fi

debug_log "Beginning main discovery loop for region: $REGION"

# Initialize JSON structure
cat << EOF
{
EOF

echo "    \"REGION\": \"$REGION\","

# Function to get AWS resources with proper JSON formatting
get_aws_resources() {
    local resource_type="$1"
    local aws_command="$2"
    
    if [[ "$VERBOSE" == "true" ]]; then
        echo "Discovering $resource_type..." >&2
    fi
    
    debug_log "Running: $aws_command"
    
    # Execute AWS command and capture JSON output
    local result
    if result=$(eval "$aws_command" 2>/dev/null); then
        if [[ "$VERBOSE" == "true" ]]; then
            echo "✅ $resource_type discovered" >&2
        fi
        echo "$result"
    else
        if [[ "$VERBOSE" == "true" ]]; then
            echo "❌ Failed to discover $resource_type" >&2
        fi
        echo "[]"
    fi
}

# EC2 Instances - using smart discovery strategy
echo "    \"EC2_INSTANCES\": $(
    # Primary: Tag-based discovery
    tagged_instances=$(aws ec2 describe-instances --region "$REGION" \
        --filters "Name=tag-value,Values=*${CLUSTER_ID}*" "Name=instance-state-name,Values=running,stopped,stopping,pending" \
        --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,VpcId,SubnetId,PrivateIpAddress,Tags[?Key==`Name`].Value|[0]]' \
        --output json 2>/dev/null || echo "[]")
    
    # Check if we found tagged instances
    if [[ "$tagged_instances" != "[]" && "$tagged_instances" != "[[]]" ]]; then
        echo "$tagged_instances"
    else
        # Secondary: VPC-scoped discovery
        cluster_vpc_ids=$(aws ec2 describe-vpcs --region "$REGION" \
            --filters "Name=tag-value,Values=*${CLUSTER_ID}*" \
            --query 'Vpcs[*].VpcId' --output text 2>/dev/null || echo "")
        
        if [[ -n "$cluster_vpc_ids" && "$cluster_vpc_ids" != "None" ]]; then
            debug_log "Found cluster VPCs: $cluster_vpc_ids - searching for untagged instances"
            aws ec2 describe-instances --region "$REGION" \
                --filters "Name=instance-type,Values=m5.xlarge,m5.large,c5.4xlarge" \
                          "Name=instance-state-name,Values=running,stopped,stopping,pending" \
                          "Name=vpc-id,Values=${cluster_vpc_ids}" \
                --query 'Reservations[*].Instances[*].[InstanceId,InstanceType,State.Name,VpcId,Tags[?Key==`kubernetes.io/cluster`] | [0].Value || `untagged`]' \
                --output json 2>/dev/null || echo "[]"
        else
            echo "[]"
        fi
    fi
),"

# EBS Volumes
echo "    \"EBS_VOLUMES\": $(get_aws_resources "EBS volumes" \
    "aws ec2 describe-volumes --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'Volumes[*].[VolumeId,Size,VolumeType,State,Encrypted,Attachments[0].InstanceId || \`unattached\`,Iops || \`0\`]' \
     --output json"),"

# EBS Snapshots
echo "    \"EBS_SNAPSHOTS\": $(get_aws_resources "EBS snapshots" \
    "aws ec2 describe-snapshots --region '$REGION' \
     --owner-ids self \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'Snapshots[*].[SnapshotId,VolumeSize,State,StartTime,Description]' \
     --output json"),"

# Application Load Balancers
echo "    \"APPLICATION_LOAD_BALANCERS\": $(get_aws_resources "Application Load Balancers" \
    "aws elbv2 describe-load-balancers --region '$REGION' \
     --query 'LoadBalancers[?contains(LoadBalancerName, \`${CLUSTER_ID}\`)].[LoadBalancerArn,LoadBalancerName,Type,State.Code,VpcId]' \
     --output json"),"

# Classic Load Balancers
echo "    \"CLASSIC_LOAD_BALANCERS\": $(get_aws_resources "Classic Load Balancers" \
    "aws elb describe-load-balancers --region '$REGION' \
     --query 'LoadBalancerDescriptions[?contains(LoadBalancerName, \`${CLUSTER_ID}\`)].[LoadBalancerName,VPCId,Scheme,CreatedTime]' \
     --output json"),"

# Target Groups
echo "    \"TARGET_GROUPS\": $(get_aws_resources "Target Groups" \
    "aws elbv2 describe-target-groups --region '$REGION' \
     --query 'TargetGroups[?contains(TargetGroupName, \`${CLUSTER_ID}\`)].[TargetGroupArn,TargetGroupName,Protocol,Port,VpcId]' \
     --output json"),"

# Auto Scaling Groups
echo "    \"AUTO_SCALING_GROUPS\": $(get_aws_resources "Auto Scaling Groups" \
    "aws autoscaling describe-auto-scaling-groups --region '$REGION' \
     --query 'AutoScalingGroups[?contains(AutoScalingGroupName, \`${CLUSTER_ID}\`)].[AutoScalingGroupName,DesiredCapacity,MinSize,MaxSize,VPCZoneIdentifier]' \
     --output json"),"

# Launch Templates
echo "    \"LAUNCH_TEMPLATES\": $(get_aws_resources "Launch Templates" \
    "aws ec2 describe-launch-templates --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'LaunchTemplates[*].[LaunchTemplateId,LaunchTemplateName,LatestVersionNumber,CreatedBy]' \
     --output json"),"

# VPCs
echo "    \"VPCS\": $(get_aws_resources "VPCs" \
    "aws ec2 describe-vpcs --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'Vpcs[*].[VpcId,CidrBlock,State,IsDefault,Tags[?Key==\`Name\`].Value|[0]]' \
     --output json"),"

# Subnets
echo "    \"SUBNETS\": $(get_aws_resources "Subnets" \
    "aws ec2 describe-subnets --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'Subnets[*].[SubnetId,VpcId,CidrBlock,AvailabilityZone,MapPublicIpOnLaunch,Tags[?Key==\`Name\`].Value|[0]]' \
     --output json"),"

# Internet Gateways
echo "    \"INTERNET_GATEWAYS\": $(get_aws_resources "Internet Gateways" \
    "aws ec2 describe-internet-gateways --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'InternetGateways[*].[InternetGatewayId,Attachments[0].VpcId,Attachments[0].State,Tags[?Key==\`Name\`].Value|[0]]' \
     --output json"),"

# NAT Gateways
echo "    \"NAT_GATEWAYS\": $(get_aws_resources "NAT Gateways" \
    "aws ec2 describe-nat-gateways --region '$REGION' \
     --filter 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'NatGateways[*].[NatGatewayId,VpcId,SubnetId,State,NatGatewayAddresses[0].PublicIp]' \
     --output json"),"

# Route Tables
echo "    \"ROUTE_TABLES\": $(get_aws_resources "Route Tables" \
    "aws ec2 describe-route-tables --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'RouteTables[*].[RouteTableId,VpcId,Associations[0].Main || \`false\`,Tags[?Key==\`Name\`].Value|[0]]' \
     --output json"),"

# Security Groups
echo "    \"SECURITY_GROUPS\": $(get_aws_resources "Security Groups" \
    "aws ec2 describe-security-groups --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'SecurityGroups[*].[GroupId,GroupName,VpcId,Description]' \
     --output json"),"

# Network ACLs
echo "    \"NETWORK_ACLS\": $(get_aws_resources "Network ACLs" \
    "aws ec2 describe-network-acls --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'NetworkAcls[*].[NetworkAclId,VpcId,IsDefault,Associations[0].SubnetId || \`none\`]' \
     --output json"),"

# Network Interfaces
echo "    \"NETWORK_INTERFACES\": $(get_aws_resources "Network Interfaces" \
    "aws ec2 describe-network-interfaces --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'NetworkInterfaces[*].[NetworkInterfaceId,InterfaceType,Status,VpcId,SubnetId,PrivateIpAddress,Attachment.InstanceId || \`unattached\`]' \
     --output json"),"

# VPC Endpoints
echo "    \"VPC_ENDPOINTS\": $(get_aws_resources "VPC Endpoints" \
    "aws ec2 describe-vpc-endpoints --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'VpcEndpoints[*].[VpcEndpointId,VpcId,ServiceName,State,VpcEndpointType]' \
     --output json"),"

# Elastic IPs
echo "    \"ELASTIC_IPS\": $(get_aws_resources "Elastic IPs" \
    "aws ec2 describe-addresses --region '$REGION' \
     --filters 'Name=tag-value,Values=*${CLUSTER_ID}*' \
     --query 'Addresses[*].[AllocationId,PublicIp,InstanceId || \`unassociated\`,NetworkInterfaceId || \`none\`,Domain]' \
     --output json"),"

# EFS File Systems
echo "    \"EFS_FILE_SYSTEMS\": $(get_aws_resources "EFS File Systems" \
    "aws efs describe-file-systems --region '$REGION' \
     --query 'FileSystems[?contains(Name, \`${CLUSTER_ID}\`)].[FileSystemId,Name,LifeCycleState,SizeInBytes.Value,CreationTime]' \
     --output json"),"

# EFS Mount Targets
echo "    \"EFS_MOUNT_TARGETS\": $(get_aws_resources "EFS Mount Targets" \
    "aws efs describe-mount-targets --region '$REGION' \
     --query 'MountTargets[*].[MountTargetId,FileSystemId,SubnetId,LifeCycleState,IpAddress]' \
     --output json"),"

# RDS Instances
echo "    \"RDS_INSTANCES\": $(get_aws_resources "RDS Instances" \
    "aws rds describe-db-instances --region '$REGION' \
     --query 'DBInstances[?contains(DBInstanceIdentifier, \`${CLUSTER_ID}\`)].[DBInstanceIdentifier,DBInstanceStatus,DBInstanceClass,Engine,DBSubnetGroup.VpcId]' \
     --output json"),"

# RDS Clusters
echo "    \"RDS_CLUSTERS\": $(get_aws_resources "RDS Clusters" \
    "aws rds describe-db-clusters --region '$REGION' \
     --query 'DBClusters[?contains(DBClusterIdentifier, \`${CLUSTER_ID}\`)].[DBClusterIdentifier,Status,Engine,VpcSecurityGroups[0].VpcId]' \
     --output json"),"

# EKS Clusters
echo "    \"EKS_CLUSTERS\": $(get_aws_resources "EKS Clusters" \
    "aws eks describe-cluster --region '$REGION' --name '${CLUSTER_ID}' \
     --query 'cluster.[name,status,version,platformVersion,endpoint,resourcesVpcConfig.vpcId]' \
     --output json"),"

# ECR Repositories
echo "    \"ECR_REPOSITORIES\": $(get_aws_resources "ECR Repositories" \
    "aws ecr describe-repositories --region '$REGION' \
     --query 'repositories[?contains(repositoryName, \`${CLUSTER_ID}\`)].[repositoryName,repositoryUri,createdAt]' \
     --output json"),"

# CloudFormation Stacks
echo "    \"CLOUDFORMATION_STACKS\": $(get_aws_resources "CloudFormation Stacks" \
    "aws cloudformation describe-stacks --region '$REGION' \
     --query 'Stacks[?contains(StackName, \`${CLUSTER_ID}\`)].[StackName,StackStatus,CreationTime,Description]' \
     --output json"),"

# Global IAM Resources (region-independent)
if [[ "$VERBOSE" == "true" ]]; then
    echo "" >&2
    echo "===== Global IAM Resources =====" >&2
fi

echo "    \"GLOBAL_IAM_RESOURCES\": {"

# IAM Roles
echo "        \"IAM_ROLES\": $(get_aws_resources "IAM Roles" \
    "aws iam list-roles \
     --query 'Roles[?contains(RoleName, \`${CLUSTER_ID}\`)].[RoleName,Arn,CreateDate,Description]' \
     --output json"),"

# IAM Policies
echo "        \"IAM_POLICIES\": $(get_aws_resources "IAM Policies" \
    "aws iam list-policies --scope Local \
     --query 'Policies[?contains(PolicyName, \`${CLUSTER_ID}\`)].[PolicyName,Arn,CreateDate,Description]' \
     --output json"),"

# IAM Instance Profiles (remove trailing comma)
echo "        \"IAM_INSTANCE_PROFILES\": $(get_aws_resources "IAM Instance Profiles" \
    "aws iam list-instance-profiles \
     --query 'InstanceProfiles[?contains(InstanceProfileName, \`${CLUSTER_ID}\`)].[InstanceProfileName,Arn,CreateDate]' \
     --output json")"

echo "    }"
echo "}"

if [[ "$VERBOSE" == "true" ]]; then
    echo "" >&2
    echo "Discovery completed successfully!" >&2
    echo "Searched regions: ${REGIONS[*]}" >&2
fi

debug_log "Script completed successfully"