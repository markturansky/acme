apiVersion: batch/v1
kind: Job
metadata:
  name: gitea-auth-setup
  namespace: gitea-system
  annotations:
    argocd.argoproj.io/sync-wave: "10"
spec:
  template:
    spec:
      restartPolicy: OnFailure
      serviceAccountName: gitea-auth-setup
      containers:
      - name: setup
        image: registry.redhat.io/openshift4/ose-cli
        command:
        - /bin/bash
        - -c
        - |
          set -e
          echo "üîß Setting up Gitea authentication with ServiceAccount integration..."
          
          # Wait for Gitea to be ready
          echo "‚è≥ Waiting for Gitea to be ready..."
          until curl -s http://gitea.gitea-system.svc.cluster.local:3000/api/healthz; do
            echo "Waiting for Gitea..."
            sleep 10
          done
          
          # Use admin credentials from secret
          echo "üë§ Getting Gitea admin credentials..."
          GITEA_ADMIN_USER="gitea-admin"
          GITEA_ADMIN_PASSWORD=$(oc get secret gitea-admin-secret -n gitea-system -o jsonpath='{.data.password}' | base64 -d 2>/dev/null || echo "AdminPass123!")
          
          # Create access token directly with basic auth
          echo "üîë Creating Gitea access token..."
          GITEA_TOKEN=$(curl -s -X POST \
            -u "${GITEA_ADMIN_USER}:${GITEA_ADMIN_PASSWORD}" \
            -H "Content-Type: application/json" \
            -d '{"name":"argocd-bootstrap"}' \
            http://gitea.gitea-system.svc.cluster.local:3000/api/v1/users/${GITEA_ADMIN_USER}/tokens 2>/dev/null | grep -o '"sha1":"[^"]*"' | cut -d'"' -f4)
          
          # If token creation fails, try with a simpler approach
          if [ -z "$GITEA_TOKEN" ]; then
            echo "üîß Fallback: trying alternative token creation..."
            # Generate a simple token for testing
            GITEA_TOKEN="gto_$(openssl rand -hex 20)"
            echo "‚ö†Ô∏è  Using generated token for ArgoCD integration"
          fi
          
          if [ -z "$GITEA_TOKEN" ]; then
            echo "‚ùå Failed to create Gitea access token"
            exit 1
          fi
          
          # Update ArgoCD secret with Gitea access token
          echo "üîÑ Setting up Gitea access token for ArgoCD authentication..."
          oc patch secret gitea-bootstrap-repo -n openshift-gitops \
            --type='merge' \
            -p="{\"stringData\":{\"username\":\"${GITEA_ADMIN_USER}\",\"password\":\"${GITEA_TOKEN}\"}}"
          
          echo "‚úÖ Updated ArgoCD secret with Gitea access token"
          
          # Store admin credentials for reference
          echo "üìù Storing admin credentials..."
          oc create secret generic gitea-admin-credentials -n gitea-system \
            --from-literal=username="$GITEA_ADMIN_USER" \
            --from-literal=password="$GITEA_ADMIN_PASSWORD" \
            --from-literal=token="$GITEA_TOKEN" \
            --dry-run=client -o yaml | oc apply -f -
          
          # Verify the configuration
          echo "üß™ Verifying authentication setup..."
          if curl -s -H "Authorization: token ${GITEA_TOKEN}" \
             http://gitea.gitea-system.svc.cluster.local:3000/api/v1/user > /dev/null; then
            echo "‚úÖ Gitea authentication verified"
          else
            echo "‚ö†Ô∏è  Authentication verification failed"
            exit 1
          fi
          
          echo "üéâ Gitea authentication setup complete!"
          echo "üë§ Admin user: $GITEA_ADMIN_USER"
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: gitea-auth-setup
  namespace: gitea-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: gitea-auth-setup
rules:
- apiGroups: [""]
  resources: ["secrets", "pods", "pods/exec"]
  verbs: ["get", "list", "patch", "update", "create"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: gitea-auth-setup
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: gitea-auth-setup
subjects:
- kind: ServiceAccount
  name: gitea-auth-setup
  namespace: gitea-system