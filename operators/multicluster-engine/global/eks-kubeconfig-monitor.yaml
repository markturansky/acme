apiVersion: batch/v1
kind: CronJob
metadata:
  name: eks-kubeconfig-monitor
  namespace: multicluster-engine
spec:
  schedule: "*/10 * * * *"  # Every 10 minutes
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: eks-kubeconfig-provisioner
          containers:
          - name: monitor
            image: quay.io/openshift/aws-cli:latest
            command:
            - /bin/bash
            - -c
            - |
              set -euo pipefail
              
              echo "🔍 [$(date)] EKS Kubeconfig Monitor - Scanning for missing kubeconfigs..."
              
              fixed_count=0
              checked_count=0
              
              # Find all EKS clusters that are Provisioned but missing kubeconfig secret
              for namespace in $(oc get namespaces -o name | grep "eks-" | cut -d/ -f2); do
                echo "Checking namespace: $namespace"
                checked_count=$((checked_count + 1))
                
                # Check if cluster exists and is provisioned
                if oc get cluster "$namespace" -n "$namespace" >/dev/null 2>&1; then
                  phase=$(oc get cluster "$namespace" -n "$namespace" -o jsonpath='{.status.phase}')
                  
                  if [[ "$phase" == "Provisioned" ]]; then
                    # Check if kubeconfig secret exists
                    if ! oc get secret "${namespace}-kubeconfig" -n "$namespace" >/dev/null 2>&1; then
                      echo "  🔧 Creating missing kubeconfig for $namespace"
                      
                      # Get EKS cluster info
                      cluster_endpoint=$(oc get awsmanagedcontrolplane "$namespace" -n "$namespace" -o jsonpath='{.spec.controlPlaneEndpoint.host}' 2>/dev/null || echo "")
                      cluster_region=$(oc get awsmanagedcontrolplane "$namespace" -n "$namespace" -o jsonpath='{.spec.region}' 2>/dev/null || echo "")
                      
                      if [[ -n "$cluster_endpoint" && -n "$cluster_region" ]]; then
                        # Generate kubeconfig using AWS CLI
                        export AWS_REGION="$cluster_region"
                        
                        if aws eks describe-cluster --name "$namespace" >/dev/null 2>&1; then
                          aws eks update-kubeconfig --name "$namespace" --kubeconfig "/tmp/${namespace}-kubeconfig" --alias "$namespace"
                          
                          if [[ -f "/tmp/${namespace}-kubeconfig" ]]; then
                            # Create the kubeconfig secret
                            oc create secret generic "${namespace}-kubeconfig" \
                              -n "$namespace" \
                              --from-file=kubeconfig="/tmp/${namespace}-kubeconfig" \
                              --dry-run=client -o yaml | \
                            oc apply -f -
                            
                            # Trigger ACM import restart
                            if oc get managedcluster "$namespace" >/dev/null 2>&1; then
                              oc annotate managedcluster "$namespace" \
                                "import.open-cluster-management.io/kubeconfig-secret-name=${namespace}-kubeconfig" \
                                "import.open-cluster-management.io/kubeconfig-secret-namespace=${namespace}" \
                                "import.open-cluster-management.io/last-fix-attempt=$(date -Iseconds)" \
                                --overwrite
                              
                              # Remove unreachable taint to trigger reimport
                              oc patch managedcluster "$namespace" --type=json -p='[{"op": "remove", "path": "/spec/taints"}]' || true
                            fi
                            
                            echo "  ✅ Fixed kubeconfig for $namespace"
                            fixed_count=$((fixed_count + 1))
                          fi
                        else
                          echo "  ⚠️  EKS cluster $namespace not found in AWS"
                        fi
                      fi
                    fi
                  fi
                fi
              done
              
              echo "📊 Summary: Checked $checked_count namespaces, fixed $fixed_count kubeconfigs"
              
              # If we fixed any clusters, give ACM some time to process
              if [[ $fixed_count -gt 0 ]]; then
                echo "⏳ Waiting 30s for ACM to process changes..."
                sleep 30
                
                echo "🔄 Checking import status..."
                for namespace in $(oc get namespaces -o name | grep "eks-" | cut -d/ -f2); do
                  if oc get managedcluster "$namespace" >/dev/null 2>&1; then
                    status=$(oc get managedcluster "$namespace" -o jsonpath='{.status.conditions[?(@.type=="ManagedClusterConditionAvailable")].status}' || echo "Unknown")
                    echo "  $namespace: $status"
                  fi
                done
              fi
            env:
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: aws_access_key_id
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: aws-credentials
                  key: aws_secret_access_key
          restartPolicy: OnFailure
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3